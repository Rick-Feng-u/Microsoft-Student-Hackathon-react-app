var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Pressable, View } from 'react-native';
import { buttonName } from './Button.types';
import { compose } from '@uifabricshared/foundation-compose';
import { withSlots } from '@uifabricshared/foundation-composable';
import { Text } from '@fluentui-react-native/text';
import { settings } from './Button.settings';
import { backgroundColorTokens, borderTokens, textTokens, foregroundColorTokens, getPaletteFromTheme } from '@fluentui-react-native/tokens';
import { filterViewProps } from '@fluentui-react-native/adapters';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { useAsPressable, useViewCommandFocus, createIconProps } from '@fluentui-react-native/interactive-hooks';
import { Icon } from '@fluentui-react-native/icon';
export var Button = compose({
    displayName: buttonName,
    usePrepareProps: function (userProps, useStyling) {
        var icon = userProps.icon, startIcon = userProps.startIcon, endIcon = userProps.endIcon, content = userProps.content, _a = userProps.accessibilityLabel, accessibilityLabel = _a === void 0 ? userProps.content : _a, testID = userProps.testID, onClick = userProps.onClick, rest = __rest(userProps, ["icon", "startIcon", "endIcon", "content", "accessibilityLabel", "testID", "onClick"]);
        // attach the pressable state handlers
        var pressable = useAsPressable(__assign(__assign({}, rest), { onPress: onClick }));
        // set up state
        var state = {
            info: __assign(__assign({}, pressable.state), { disabled: !!userProps.disabled, content: !!content, startIcon: !!startIcon || !!icon, endIcon: !!endIcon }),
        };
        var buttonRef = useViewCommandFocus(userProps.componentRef);
        // grab the styling information, referencing the state as well as the props
        var styleProps = useStyling(userProps, function (override) { return state.info[override] || userProps[override]; });
        // create the merged slot props
        var slotProps = mergeSettings(styleProps, {
            ripple: __assign(__assign({}, pressable.props), { ref: buttonRef, accessibilityLabel: accessibilityLabel, accessibilityState: { disabled: state.info.disabled }, focusable: !state.info.disabled }),
            content: { children: content, testID: testID },
            startIcon: createIconProps(startIcon || icon),
            endIcon: createIconProps(endIcon),
        });
        return { slotProps: slotProps, state: state };
    },
    settings: settings,
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var info = renderData.state.info;
        return (withSlots(Slots.root, null,
            withSlots(Slots.ripple, null,
                withSlots(Slots.stack, null,
                    info.startIcon && withSlots(Slots.startIcon, null),
                    info.content && withSlots(Slots.content, null),
                    children,
                    info.endIcon && withSlots(Slots.endIcon, null)))));
    },
    slots: {
        root: View,
        ripple: Pressable,
        stack: { slotType: View, filter: filterViewProps },
        startIcon: { slotType: Icon },
        content: Text,
        endIcon: { slotType: Icon },
    },
    styles: {
        root: [backgroundColorTokens, borderTokens],
        ripple: [],
        stack: [],
        startIcon: [{ source: 'iconColor', lookup: getPaletteFromTheme, target: 'color' }],
        content: [textTokens, foregroundColorTokens],
        endIcon: [],
    },
});
export default Button;
//# sourceMappingURL=Button.android.js.map