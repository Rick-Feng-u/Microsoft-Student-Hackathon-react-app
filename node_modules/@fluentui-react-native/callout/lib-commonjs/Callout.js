"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var interactive_hooks_1 = require("@fluentui-react-native/interactive-hooks");
var tokens_1 = require("@fluentui-react-native/tokens");
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var Callout_settings_1 = require("./Callout.settings");
var Callout_types_1 = require("./Callout.types");
var component_cache_1 = require("@fluentui-react-native/component-cache");
var RCTCallout = component_cache_1.ensureNativeComponent('RCTCallout');
exports.Callout = foundation_compose_1.compose({
    displayName: Callout_types_1.calloutName,
    usePrepareProps: function (props, useStyling) {
        var componentRef = props.componentRef, target = props.target, rest = __rest(props, ["componentRef", "target"]);
        var calloutRef = interactive_hooks_1.useViewCommandFocus(componentRef);
        var _a = React.useState(null), nativeTarget = _a[0], setNativeTarget = _a[1];
        React.useLayoutEffect(function () {
            if (typeof target === 'string') {
                // Pass string type `target` directly
                setNativeTarget(target);
            }
            else if (target === null || target === void 0 ? void 0 : target.current) {
                // Pass the tagID for a valid ref `target`
                setNativeTarget(react_native_1.findNodeHandle(target.current));
            }
        }, [target]);
        var slotProps = foundation_settings_1.mergeSettings(useStyling(props), {
            root: __assign(__assign({ ref: calloutRef }, (nativeTarget && { target: nativeTarget })), rest),
        });
        return { slotProps: slotProps };
    },
    settings: Callout_settings_1.settings,
    slots: {
        root: RCTCallout,
    },
    styles: {
        root: [tokens_1.backgroundColorTokens, tokens_1.borderTokens],
    },
});
exports.default = exports.Callout;
//# sourceMappingURL=Callout.js.map