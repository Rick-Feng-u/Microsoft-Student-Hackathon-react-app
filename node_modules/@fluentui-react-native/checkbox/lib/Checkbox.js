var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx withSlots */
import * as React from 'react';
import { View } from 'react-native';
import { Text } from '@fluentui-react-native/text';
import { checkboxName } from './Checkbox.types';
import { compose } from '@uifabricshared/foundation-compose';
import { withSlots } from '@uifabricshared/foundation-composable';
import { filterViewProps } from '@fluentui-react-native/adapters';
import { settings, checkboxSelectActionLabel } from './Checkbox.settings';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { foregroundColorTokens, textTokens, borderTokens, getPaletteFromTheme } from '@fluentui-react-native/tokens';
import { useAsToggle, useAsPressable, useViewCommandFocus, useKeyCallback, useOnPressWithFocus, } from '@fluentui-react-native/interactive-hooks';
import { backgroundColorTokens } from '@fluentui-react-native/tokens';
export var Checkbox = compose({
    displayName: checkboxName,
    usePrepareProps: function (userProps, useStyling) {
        var _a;
        var defaultComponentRef = React.useRef(null);
        var accessible = userProps.accessible, accessibilityLabel = userProps.accessibilityLabel, accessibilityRole = userProps.accessibilityRole, ariaLabel = userProps.ariaLabel, checked = userProps.checked, defaultChecked = userProps.defaultChecked, boxSide = userProps.boxSide, label = userProps.label, onChange = userProps.onChange, _b = userProps.componentRef, componentRef = _b === void 0 ? defaultComponentRef : _b, rest = __rest(userProps, ["accessible", "accessibilityLabel", "accessibilityRole", "ariaLabel", "checked", "defaultChecked", "boxSide", "label", "onChange", "componentRef"]);
        // Warns defaultChecked and checked being mutually exclusive.
        if (defaultChecked != undefined && checked != undefined) {
            console.warn('defaultChecked and checked are mutually exclusive to one another. Use one or the other.');
        }
        // Re-usable hook for toggle components.
        var _c = useAsToggle(defaultChecked, checked, onChange), isChecked = _c[0], toggleChecked = _c[1];
        // Ensure focus is placed on checkbox after click
        var toggleCheckedWithFocus = useOnPressWithFocus(componentRef, toggleChecked);
        var pressable = useAsPressable(__assign({ onPress: toggleCheckedWithFocus }, rest));
        var buttonRef = useViewCommandFocus(componentRef);
        // Handles the "Space" key toggling the Checkbox
        var onKeyUpSpace = useKeyCallback(toggleChecked, ' ');
        var state = __assign(__assign({}, pressable.state), { disabled: !!userProps.disabled, checked: isChecked, boxAtEnd: boxSide == undefined || boxSide == 'start' ? false : true });
        // Grab the styling information from the userProps, referencing the state as well as the props.
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        // Used when creating accessibility properties in mergeSettings below
        var onAccessibilityAction = React.useCallback(function (event) {
            switch (event.nativeEvent.actionName) {
                case 'Toggle':
                    toggleChecked();
                    break;
            }
        }, [toggleChecked, userProps, state, pressable.props]);
        var slotProps = mergeSettings(styleProps, {
            root: __assign(__assign({ rest: rest, ref: buttonRef }, pressable.props), { accessible: accessible !== null && accessible !== void 0 ? accessible : true, accessibilityRole: accessibilityRole !== null && accessibilityRole !== void 0 ? accessibilityRole : 'checkbox', accessibilityLabel: (_a = accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : ariaLabel) !== null && _a !== void 0 ? _a : label, accessibilityState: { disabled: state.disabled, checked: state.checked }, accessibilityActions: [{ name: 'Toggle', label: checkboxSelectActionLabel }], focusable: !state.disabled, onAccessibilityAction: onAccessibilityAction, onKeyUp: onKeyUpSpace }),
            // Temporary checkmark until SVG functionality
            checkmark: { children: 'âœ“' },
            content: { children: label },
        });
        return { slotProps: slotProps, state: state };
    },
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        return (withSlots(Slots.root, null,
            (renderData === null || renderData === void 0 ? void 0 : renderData.state.boxAtEnd) && withSlots(Slots.content, null),
            withSlots(Slots.checkbox, null,
                withSlots(Slots.checkmark, null)),
            !(renderData === null || renderData === void 0 ? void 0 : renderData.state.boxAtEnd) && withSlots(Slots.content, null),
            children));
    },
    settings: settings,
    slots: {
        root: View,
        checkbox: { slotType: View, filter: filterViewProps },
        checkmark: Text,
        content: Text,
    },
    styles: {
        root: [],
        checkbox: [
            backgroundColorTokens,
            borderTokens,
            [
                { source: 'checkboxBackgroundColor', lookup: getPaletteFromTheme, target: 'backgroundColor' },
                { source: 'checkboxBorderColor', lookup: getPaletteFromTheme, target: 'borderColor' },
            ],
        ],
        checkmark: [
            foregroundColorTokens,
            [
                { source: 'checkmarkColor', lookup: getPaletteFromTheme, target: 'color' },
                { source: 'checkmarkVisibility', target: 'opacity' },
            ],
        ],
        content: [foregroundColorTokens, textTokens, [{ source: 'textBorderColor', lookup: getPaletteFromTheme, target: 'borderColor' }]],
    },
});
export default Checkbox;
//# sourceMappingURL=Checkbox.js.map