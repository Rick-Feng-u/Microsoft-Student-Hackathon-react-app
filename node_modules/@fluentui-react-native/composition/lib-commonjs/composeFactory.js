"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var use_styling_1 = require("@fluentui-react-native/use-styling");
var use_slot_1 = require("@fluentui-react-native/use-slot");
var use_slots_1 = require("@fluentui-react-native/use-slots");
var immutable_merge_1 = require("@fluentui-react-native/immutable-merge");
/**
 * options get deep merged except the tokens array gets appended
 */
var mergeOptions = {
    tokens: 'appendArray',
    object: true,
};
function composeFactory(options, themeHelper, base) {
    // merge options together if a base is specified
    var baseOptions = base === null || base === void 0 ? void 0 : base.__options;
    options = baseOptions ? immutable_merge_1.immutableMergeCore(mergeOptions, baseOptions, options) : __assign({}, options);
    // build styling if styling options are specified
    options.useStyling = options.slotProps || options.tokens ? use_styling_1.buildUseStyling(options, themeHelper) : function () { return ({}); };
    // build the slots hook, which will use the styling hook if it has been built
    var useSlots = use_slots_1.buildUseSlots(options);
    // build the staged component
    var component = use_slot_1.stagedComponent(function (props) { return options.render(props, useSlots); });
    // attach additional props to the returned component
    component.displayName = options.displayName;
    component.__options = options;
    component.customize = function () {
        var tokens = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tokens[_i] = arguments[_i];
        }
        return composeFactory(immutable_merge_1.immutableMergeCore(mergeOptions, options, { tokens: tokens }), themeHelper);
    };
    component.compose = function (customOptions) {
        return composeFactory(immutable_merge_1.immutableMergeCore(mergeOptions, options, customOptions), themeHelper);
    };
    // attach statics if specified
    if (options.statics) {
        Object.assign(component, options.statics);
    }
    return component;
}
exports.composeFactory = composeFactory;
//# sourceMappingURL=composeFactory.js.map