"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var use_slot_1 = require("@fluentui-react-native/use-slot");
var renderer = __importStar(require("react-test-renderer"));
var composeFactory_1 = require("./composeFactory");
var react_native_1 = require("react-native");
var theme = {
    values: {
        backgroundColor: 'black',
        color: 'white',
    },
    components: {},
};
var themeHelper = {
    useTheme: function () { return theme; },
    getComponentInfo: function (theme, name) {
        var _a;
        return (_a = theme === null || theme === void 0 ? void 0 : theme.components) !== null && _a !== void 0 ? _a : theme.components[name];
    },
};
function mergeProps(p1, p2) {
    return __assign(__assign({}, p1), p2);
}
var Base = composeFactory_1.composeFactory({
    tokens: [
        function (t) { return ({
            backgroundColor: t.values.backgroundColor,
            color: t.values.color,
        }); },
    ],
    slotProps: {
        outer: function (tokens) { return ({ style: { backgroundColor: tokens.backgroundColor } }); },
        content: function (tokens) { return ({ style: { color: tokens.color } }); },
    },
    slots: {
        outer: react_native_1.View,
        content: react_native_1.Text,
    },
    render: function (props, useSlots) {
        var Slots = useSlots(props);
        return function (extra) { return (use_slot_1.withSlots(Slots.outer, __assign({}, mergeProps(props, extra)),
            use_slot_1.withSlots(Slots.content, null, "Hello"))); };
    },
}, themeHelper);
var Customized = Base.customize({ backgroundColor: 'pink' });
var mixinStyle = {
    width: 30,
    height: 20,
    borderColor: 'green',
    borderWidth: 1,
};
describe('composeFactory test suite', function () {
    it('Base component render', function () {
        var tree = renderer.create(use_slot_1.withSlots(Base, { style: mixinStyle })).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('Base component render', function () {
        var tree = renderer.create(use_slot_1.withSlots(Customized, { style: mixinStyle })).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=composeFactory.test.js.map