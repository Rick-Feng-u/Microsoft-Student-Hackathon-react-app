var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** @jsx withSlots */
import { withSlots } from '@fluentui-react-native/use-slot';
import * as renderer from 'react-test-renderer';
import { composeFactory } from './composeFactory';
import { View, Text } from 'react-native';
var theme = {
    values: {
        backgroundColor: 'black',
        color: 'white',
    },
    components: {},
};
var themeHelper = {
    useTheme: function () { return theme; },
    getComponentInfo: function (theme, name) {
        var _a;
        return (_a = theme === null || theme === void 0 ? void 0 : theme.components) !== null && _a !== void 0 ? _a : theme.components[name];
    },
};
function mergeProps(p1, p2) {
    return __assign(__assign({}, p1), p2);
}
var Base = composeFactory({
    tokens: [
        function (t) { return ({
            backgroundColor: t.values.backgroundColor,
            color: t.values.color,
        }); },
    ],
    slotProps: {
        outer: function (tokens) { return ({ style: { backgroundColor: tokens.backgroundColor } }); },
        content: function (tokens) { return ({ style: { color: tokens.color } }); },
    },
    slots: {
        outer: View,
        content: Text,
    },
    render: function (props, useSlots) {
        var Slots = useSlots(props);
        return function (extra) { return (withSlots(Slots.outer, __assign({}, mergeProps(props, extra)),
            withSlots(Slots.content, null, "Hello"))); };
    },
}, themeHelper);
var Customized = Base.customize({ backgroundColor: 'pink' });
var mixinStyle = {
    width: 30,
    height: 20,
    borderColor: 'green',
    borderWidth: 1,
};
describe('composeFactory test suite', function () {
    it('Base component render', function () {
        var tree = renderer.create(withSlots(Base, { style: mixinStyle })).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('Base component render', function () {
        var tree = renderer.create(withSlots(Customized, { style: mixinStyle })).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=composeFactory.test.js.map