"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var ContextualMenu_types_1 = require("./ContextualMenu.types");
var ContextualMenu_settings_1 = require("./ContextualMenu.settings");
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var interactive_hooks_1 = require("@fluentui-react-native/interactive-hooks");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var tokens_1 = require("@fluentui-react-native/tokens");
var callout_1 = require("@fluentui-react-native/callout");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
exports.CMContext = React.createContext({
    selectedKey: null,
    onItemClick: function ( /* key: string */) {
        return;
    },
    onDismissMenu: function () {
        return;
    },
});
exports.ContextualMenu = foundation_compose_1.compose({
    displayName: ContextualMenu_types_1.contextualMenuName,
    usePrepareProps: function (userProps, useStyling) {
        var setShowMenu = userProps.setShowMenu, _a = userProps.shouldFocusOnMount, shouldFocusOnMount = _a === void 0 ? true : _a, _b = userProps.shouldFocusOnContainer, shouldFocusOnContainer = _b === void 0 ? false : _b, rest = __rest(userProps, ["setShowMenu", "shouldFocusOnMount", "shouldFocusOnContainer"]);
        // This hook updates the Selected Button and calls the customer's onClick function. This gets called after a button is pressed.
        var data = interactive_hooks_1.useSelectedKey(null, userProps.onItemClick);
        var dismissCallback = React.useCallback(function () {
            userProps.onDismiss();
            setShowMenu(false);
        }, [setShowMenu, userProps.onDismiss]);
        var _c = React.useState(true), containerFocus = _c[0], setContainerFocus = _c[1];
        var toggleContainerFocus = React.useCallback(function () {
            setContainerFocus(false);
        }, [setContainerFocus]);
        var state = {
            context: {
                selectedKey: data.selectedKey,
                onItemClick: data.onKeySelect,
                onDismissMenu: dismissCallback,
            },
        };
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var slotProps = foundation_settings_1.mergeSettings(styleProps, {
            root: __assign(__assign({}, rest), { setInitialFocus: shouldFocusOnMount }),
            container: {
                accessible: shouldFocusOnContainer,
                focusable: shouldFocusOnContainer && containerFocus,
                onBlur: toggleContainerFocus,
            },
        });
        return { slotProps: slotProps, state: state };
    },
    settings: ContextualMenu_settings_1.settings,
    slots: {
        root: callout_1.Callout,
        container: react_native_1.View,
    },
    styles: {
        root: [tokens_1.backgroundColorTokens, tokens_1.borderTokens],
        container: [],
    },
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        if (renderData.state == undefined) {
            return null;
        }
        return (foundation_composable_1.withSlots(exports.CMContext.Provider, { value: renderData.state.context },
            foundation_composable_1.withSlots(Slots.root, null,
                foundation_composable_1.withSlots(Slots.container, null, children))));
    },
});
exports.default = exports.ContextualMenu;
//# sourceMappingURL=ContextualMenu.js.map