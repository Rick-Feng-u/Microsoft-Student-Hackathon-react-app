/// <reference types="react" />
import { ICalloutProps, ICalloutTokens } from '@fluentui-react-native/callout';
import { ViewProps } from 'react-native';
import { IRenderData } from '@uifabricshared/foundation-composable';
export declare const contextualMenuName = "ContextualMenu";
export interface ContextualMenuContext {
    selectedKey: string | null;
    onItemClick?: (key: string) => void;
    onDismissMenu?: () => void;
    isSubmenuOpen?: boolean;
    dismissSubmenu?: () => void;
    setSubmenuItemHovered?: React.Dispatch<React.SetStateAction<boolean>>;
}
export interface ContextualMenuState {
    context: ContextualMenuContext;
}
export declare type ContextualMenuTokens = ICalloutTokens;
/**
 * Properties and Tokens for FluentUI React Native ContextualMenu
 */
export interface ContextualMenuProps extends Omit<ICalloutProps, 'setInitialFocus'> {
    shouldFocusOnContainer?: boolean;
    shouldFocusOnMount?: boolean;
    onItemClick?: (key: string) => void;
    setShowMenu?: (showMenu: boolean) => void;
}
export declare type ContextualMenuSlotProps = {
    root: ContextualMenuProps;
    container: ViewProps;
};
export declare type ContextualMenuRenderData = IRenderData<ContextualMenuSlotProps, ContextualMenuState>;
export interface ContextualMenuType {
    props: ContextualMenuProps;
    slotProps: ContextualMenuSlotProps;
    tokens: ContextualMenuTokens;
    state: ContextualMenuState;
}
//# sourceMappingURL=ContextualMenu.types.d.ts.map