var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx withSlots */
import * as React from 'react';
import { View } from 'react-native';
import { contextualMenuItemName, } from './ContextualMenuItem.types';
import { compose } from '@uifabricshared/foundation-compose';
import { withSlots } from '@uifabricshared/foundation-composable';
import { Text } from '@fluentui-react-native/text';
import { settings } from './ContextualMenuItem.settings';
import { backgroundColorTokens, borderTokens, textTokens, foregroundColorTokens, getPaletteFromTheme } from '@fluentui-react-native/tokens';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { useAsPressable, useKeyCallback, useViewCommandFocus } from '@fluentui-react-native/interactive-hooks';
import { CMContext } from './ContextualMenu';
import { Icon } from '@fluentui-react-native/icon';
import { createIconProps } from '@fluentui-react-native/interactive-hooks';
export var ContextualMenuItem = compose({
    displayName: contextualMenuItemName,
    usePrepareProps: function (userProps, useStyling) {
        var defaultComponentRef = React.useRef(null);
        var disabled = userProps.disabled, itemKey = userProps.itemKey, icon = userProps.icon, text = userProps.text, _a = userProps.accessibilityLabel, accessibilityLabel = _a === void 0 ? userProps.text : _a, onClick = userProps.onClick, testID = userProps.testID, _b = userProps.componentRef, componentRef = _b === void 0 ? defaultComponentRef : _b, rest = __rest(userProps, ["disabled", "itemKey", "icon", "text", "accessibilityLabel", "onClick", "testID", "componentRef"]);
        // Grabs the context information from ContextualMenu (currently selected menuItem and client's onItemClick callback)
        var context = React.useContext(CMContext);
        var onItemClick = React.useCallback(function (e) {
            if (!disabled) {
                context === null || context === void 0 ? void 0 : context.onDismissMenu();
                onClick ? onClick() : context === null || context === void 0 ? void 0 : context.onItemClick(itemKey);
                e.stopPropagation();
            }
        }, [context, disabled, itemKey, onClick]);
        var cmRef = useViewCommandFocus(componentRef);
        var onItemHoverIn = React.useCallback(function () {
            componentRef.current.focus();
            (context === null || context === void 0 ? void 0 : context.setSubmenuItemHovered) && context.setSubmenuItemHovered(false);
            // dismiss submenu
            if (!disabled && (context === null || context === void 0 ? void 0 : context.isSubmenuOpen)) {
                (context === null || context === void 0 ? void 0 : context.dismissSubmenu) && context.dismissSubmenu();
            }
        }, [componentRef, disabled, context]);
        var pressable = useAsPressable(__assign(__assign({}, rest), { onPress: onItemClick, onHoverIn: onItemHoverIn }));
        var onKeyUp = useKeyCallback(onItemClick, ' ', 'Enter');
        // set up state
        var state = __assign(__assign({}, pressable.state), { selected: context.selectedKey === userProps.itemKey, disabled: userProps.disabled, content: !!text, icon: !!icon });
        /*
         * On Desktop, focus gets moved to the root of the menu, so hovering off the menu does not automatically call onBlur as we expect it to.
         * OnMouseEnter and onMouseLeave are overridden with the below callbacks that calls onFocus and onBlur explicitly
         */
        var onMouseEnter = React.useCallback(function (e) {
            pressable.props.onMouseEnter && pressable.props.onMouseEnter(e);
            pressable.props.onFocus && pressable.props.onFocus(e);
            e.stopPropagation();
        }, [pressable]);
        var onMouseLeave = React.useCallback(function (e) {
            pressable.props.onMouseLeave && pressable.props.onMouseLeave(e);
            pressable.props.onBlur && pressable.props.onBlur(e);
            e.stopPropagation();
        }, [pressable]);
        // grab the styling information, referencing the state as well as the props
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        // create the merged slot props
        var slotProps = mergeSettings(styleProps, {
            root: __assign(__assign({}, pressable.props), { ref: cmRef, onKeyUp: onKeyUp, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, accessibilityLabel: accessibilityLabel }),
            content: { children: text, testID: testID },
            icon: createIconProps(icon),
        });
        return { slotProps: slotProps, state: state };
    },
    settings: settings,
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        // We shouldn't have to specify the source prop on Slots.icon, here, but we need another drop from @uifabricshared
        return (withSlots(Slots.root, null,
            withSlots(Slots.stack, null,
                renderData.state.icon && withSlots(Slots.icon, null),
                renderData.state.content && withSlots(Slots.content, null),
                children)));
    },
    slots: {
        root: View,
        stack: { slotType: View },
        icon: { slotType: Icon },
        content: Text,
    },
    styles: {
        root: [backgroundColorTokens, borderTokens],
        stack: [],
        icon: [{ source: 'iconColor', lookup: getPaletteFromTheme, target: 'color' }],
        content: [textTokens, foregroundColorTokens],
    },
});
export default ContextualMenuItem;
//# sourceMappingURL=ContextualMenuItem.js.map