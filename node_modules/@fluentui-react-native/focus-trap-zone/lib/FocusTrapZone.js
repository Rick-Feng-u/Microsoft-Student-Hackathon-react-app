var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { composable } from '@uifabricshared/foundation-composable';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { useViewCommandFocus } from '@fluentui-react-native/interactive-hooks';
import { ensureNativeComponent } from '@fluentui-react-native/component-cache';
var RCTFocusTrapZone = ensureNativeComponent('RCTFocusTrapZone');
export function filterOutComponentRef(propName) {
    return propName !== 'componentRef';
}
export var FocusTrapZone = composable({
    usePrepareProps: function (userProps, useStyling) {
        var ftzRef = useViewCommandFocus(userProps.componentRef);
        return {
            slotProps: mergeSettings(useStyling(userProps), { root: __assign(__assign({}, userProps), { ref: ftzRef }) }),
        };
    },
    slots: {
        root: { slotType: RCTFocusTrapZone, filter: filterOutComponentRef },
    },
});
//# sourceMappingURL=FocusTrapZone.js.map