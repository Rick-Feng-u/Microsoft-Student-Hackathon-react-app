"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var interactive_hooks_1 = require("@fluentui-react-native/interactive-hooks");
var component_cache_1 = require("@fluentui-react-native/component-cache");
var RCTFocusZone = component_cache_1.ensureNativeComponent('RCTFocusZone');
var filterOutComponentRef = function (propName) { return propName !== 'componentRef'; };
exports.FocusZone = foundation_composable_1.composable({
    usePrepareProps: function (userProps, useStyling) {
        var componentRef = userProps.componentRef, defaultTabbableElement = userProps.defaultTabbableElement, isCircularNavigation = userProps.isCircularNavigation, rest = __rest(userProps, ["componentRef", "defaultTabbableElement", "isCircularNavigation"]);
        var ftzRef = interactive_hooks_1.useViewCommandFocus(componentRef);
        var _a = React.useState(undefined), targetNativeTag = _a[0], setTargetNativeTag = _a[1];
        React.useLayoutEffect(function () {
            if (defaultTabbableElement === null || defaultTabbableElement === void 0 ? void 0 : defaultTabbableElement.current) {
                setTargetNativeTag(react_native_1.findNodeHandle(defaultTabbableElement.current));
            }
            else {
                setTargetNativeTag(undefined);
            }
        }, [defaultTabbableElement]);
        return {
            slotProps: foundation_settings_1.mergeSettings(useStyling(userProps), {
                root: __assign(__assign({}, rest), { defaultTabbableElement: targetNativeTag, ref: ftzRef, navigateAtEnd: isCircularNavigation ? 'NavigateWrap' : 'NavigateStopAtEnds' }),
            }),
        };
    },
    slots: {
        root: { slotType: RCTFocusZone, filter: filterOutComponentRef },
    },
});
//# sourceMappingURL=FocusZone.js.map