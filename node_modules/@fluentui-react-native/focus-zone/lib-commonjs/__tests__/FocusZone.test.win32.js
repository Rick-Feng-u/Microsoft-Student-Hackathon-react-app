"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var __1 = require("..");
var react_native_1 = require("react-native");
var renderer = __importStar(require("react-test-renderer"));
var onPress = function () {
    return;
};
describe('FocusZone No Props', function () {
    it('No children', function () {
        var tree = renderer.create(React.createElement(__1.FocusZone, null)).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('One child', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, null,
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('Two children', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, null,
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('Three children', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, null,
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
});
describe('FocusZone With Props', function () {
    it('defaultTabbableElement Prop', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, { defaultTabbableElement: null },
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('focusZoneDirection Prop', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, { focusZoneDirection: "bidirectional" },
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('disabled Prop', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, { disabled: true },
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('isCircularNavigation Prop', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, { isCircularNavigation: true },
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('use2DNavigation Prop', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, { use2DNavigation: true },
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('All Props', function () {
        var tree = renderer
            .create(React.createElement(__1.FocusZone, { disabled: false, use2DNavigation: true, defaultTabbableElement: null, isCircularNavigation: false, focusZoneDirection: "vertical" },
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress }),
            React.createElement(react_native_1.Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=FocusZone.test.win32.js.map