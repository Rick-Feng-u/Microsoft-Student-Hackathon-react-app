var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { findNodeHandle } from 'react-native';
import { composable } from '@uifabricshared/foundation-composable';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { useViewCommandFocus } from '@fluentui-react-native/interactive-hooks';
import { ensureNativeComponent } from '@fluentui-react-native/component-cache';
var RCTFocusZone = ensureNativeComponent('RCTFocusZone');
var filterOutComponentRef = function (propName) { return propName !== 'componentRef'; };
export var FocusZone = composable({
    usePrepareProps: function (userProps, useStyling) {
        var componentRef = userProps.componentRef, defaultTabbableElement = userProps.defaultTabbableElement, isCircularNavigation = userProps.isCircularNavigation, rest = __rest(userProps, ["componentRef", "defaultTabbableElement", "isCircularNavigation"]);
        var ftzRef = useViewCommandFocus(componentRef);
        var _a = React.useState(undefined), targetNativeTag = _a[0], setTargetNativeTag = _a[1];
        React.useLayoutEffect(function () {
            if (defaultTabbableElement === null || defaultTabbableElement === void 0 ? void 0 : defaultTabbableElement.current) {
                setTargetNativeTag(findNodeHandle(defaultTabbableElement.current));
            }
            else {
                setTargetNativeTag(undefined);
            }
        }, [defaultTabbableElement]);
        return {
            slotProps: mergeSettings(useStyling(userProps), {
                root: __assign(__assign({}, rest), { defaultTabbableElement: targetNativeTag, ref: ftzRef, navigateAtEnd: isCircularNavigation ? 'NavigateWrap' : 'NavigateStopAtEnds' }),
            }),
        };
    },
    slots: {
        root: { slotType: RCTFocusZone, filter: filterOutComponentRef },
    },
});
//# sourceMappingURL=FocusZone.js.map