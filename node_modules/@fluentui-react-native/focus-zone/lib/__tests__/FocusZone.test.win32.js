import * as React from 'react';
import { FocusZone } from '..';
import { Button } from 'react-native';
import * as renderer from 'react-test-renderer';
var onPress = function () {
    return;
};
describe('FocusZone No Props', function () {
    it('No children', function () {
        var tree = renderer.create(React.createElement(FocusZone, null)).toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('One child', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, null,
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('Two children', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, null,
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('Three children', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, null,
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
});
describe('FocusZone With Props', function () {
    it('defaultTabbableElement Prop', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, { defaultTabbableElement: null },
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('focusZoneDirection Prop', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, { focusZoneDirection: "bidirectional" },
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('disabled Prop', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, { disabled: true },
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('isCircularNavigation Prop', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, { isCircularNavigation: true },
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('use2DNavigation Prop', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, { use2DNavigation: true },
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('All Props', function () {
        var tree = renderer
            .create(React.createElement(FocusZone, { disabled: false, use2DNavigation: true, defaultTabbableElement: null, isCircularNavigation: false, focusZoneDirection: "vertical" },
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress }),
            React.createElement(Button, { title: "button", onPress: onPress })))
            .toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=FocusZone.test.win32.js.map