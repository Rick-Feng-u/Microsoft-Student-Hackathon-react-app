"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/** @jsx withSlots */
var useTokens_1 = require("./useTokens");
var use_tokens_1 = require("@fluentui-react-native/use-tokens");
var react_native_1 = require("react-native");
var compressible_1 = require("./compressible");
var merge_props_1 = require("@fluentui-react-native/merge-props");
var use_slot_1 = require("@fluentui-react-native/use-slot");
var enzyme_to_json_1 = require("enzyme-to-json");
var enzyme_1 = require("enzyme");
var useVariantTokens = useTokens_1.buildUseTokens({
    color: 'black',
    fontSize: 12,
    fontWeight: '500',
    defaultType: 'normal',
    header: {
        color: 'blue',
        fontSize: 16,
        fontWeight: '700',
    },
    caption: {
        color: 'gray',
        fontWeight: '300',
    },
});
var VariantText = compressible_1.compressible(function (props, useTokens) {
    var _a;
    // fake theme here
    var theme = {};
    // get the tokens
    var _b = useTokens(theme), tokens = _b[0], cache = _b[1];
    // split the props, defaulting the variant type to the default type from the tokens
    var _c = props.variant, variant = _c === void 0 ? tokens.defaultType : _c, style = props.style, rest = tslib_1.__rest(props, ["variant", "style"]);
    // now apply the alternate layer tokens as appropriate
    _a = use_tokens_1.applyTokenLayers(tokens, ['normal', 'header', 'caption'], cache, function (layer) { return layer === variant; }), tokens = _a[0], cache = _a[1];
    // merge styles together with what is passed in
    var mergedStyle = merge_props_1.mergeStyles({ color: tokens.color, fontSize: tokens.fontSize, fontWeight: tokens.fontWeight }, style);
    // now get the slot
    var InnerText = use_slot_1.useSlot(react_native_1.Text, tslib_1.__assign(tslib_1.__assign({}, rest), { style: mergedStyle }));
    return function (extra, children) {
        return use_slot_1.withSlots(InnerText, tslib_1.__assign({}, extra), children);
    };
}, useVariantTokens);
var SuperHeader = VariantText.customize({ header: { fontSize: 24, color: 'purple' } });
var useLabelTokens = useTokens_1.buildUseTokens({
    headerVariant: 'header',
    captionVariant: 'caption',
});
var Label = compressible_1.compressible(function (props, useTokens) {
    var theme = {};
    var tokens = useTokens(theme)[0];
    var headerText = props.headerText, captionText = props.captionText, headerSlot = props.headerSlot, captionSlot = props.captionSlot;
    var Header = use_slot_1.useSlot(headerSlot || VariantText, { variant: tokens.headerVariant });
    var Caption = use_slot_1.useSlot(captionSlot || VariantText, { variant: tokens.captionVariant });
    return function () {
        if (captionText) {
            return (use_slot_1.withSlots(react_native_1.View, null,
                use_slot_1.withSlots(Header, null, headerText),
                use_slot_1.withSlots(Caption, null, captionText)));
        }
        return use_slot_1.withSlots(Header, null, headerText);
    };
}, useLabelTokens);
/**
 * this wrapper solves the (so-far) inexplicable type errors from the matchers in typescript
 */
function snapshotTestTree(tree) {
    expect(enzyme_to_json_1.default(tree)).toMatchSnapshot();
}
describe('compressible tests', function () {
    /** first render the component with no updates */
    it('Two labels, one with caption and one without', function () {
        var tree = enzyme_1.mount(use_slot_1.withSlots(react_native_1.View, null,
            use_slot_1.withSlots(Label, { headerText: "Header1" }),
            use_slot_1.withSlots(Label, { headerText: "Header2", captionText: "Caption2" })));
        snapshotTestTree(tree);
    });
    it('Two labels, one plugging in SuperHeader instead', function () {
        var tree = enzyme_1.mount(use_slot_1.withSlots(react_native_1.View, null,
            use_slot_1.withSlots(Label, { headerText: "Super Header", headerSlot: SuperHeader, captionText: "Normal caption" }),
            use_slot_1.withSlots(Label, { headerText: "Normal Header", captionText: "Another normal caption" })));
        snapshotTestTree(tree);
    });
});
//# sourceMappingURL=compressible.test.js.map