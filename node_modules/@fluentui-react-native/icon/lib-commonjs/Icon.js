"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var text_1 = require("@fluentui-react-native/text");
var framework_1 = require("@fluentui-react-native/framework");
var framework_2 = require("@fluentui-react-native/framework");
var theming_utils_1 = require("@fluentui-react-native/theming-utils");
var react_native_svg_1 = require("react-native-svg");
var rasterImageStyleCache = framework_2.getMemoCache();
function renderRasterImage(iconProps) {
    var width = iconProps.width, height = iconProps.height, color = iconProps.color;
    var style = framework_1.mergeStyles(iconProps.style, rasterImageStyleCache({ width: width, height: height, tintColor: color }, [width, height, color])[0]);
    return React.createElement(react_native_1.Image, { source: iconProps.rasterImageSource.src, style: style });
}
function fontFamilyFromFontSrcFile(fontSrcFile, fontFamily) {
    if (react_native_1.Platform.OS == 'windows') {
        // This `${family}#${path}` notation is specific to WPF
        var asset = react_native_1.Image.resolveAssetSource(+fontSrcFile);
        return fontFamily + "#" + asset.uri;
    }
    else {
        return fontFamily;
    }
}
var fontStyleMemoCache = framework_2.getMemoCache();
function renderFontIcon(iconProps) {
    var fontSource = iconProps.fontSource;
    var style = fontStyleMemoCache({
        fontSrcFile: fontSource.fontSrcFile,
        fontFamily: fontSource.fontSrcFile != undefined
            ? fontFamilyFromFontSrcFile(fontSource.fontSrcFile, fontSource.fontFamily)
            : fontSource.fontFamily,
        fontSize: fontSource.fontSize,
        color: iconProps.color,
    }, [iconProps.color, fontSource.fontSrcFile, fontSource.fontFamily])[0];
    var char = String.fromCharCode(fontSource.codepoint);
    return React.createElement(text_1.Text, { style: style }, char);
}
function renderSvg(iconProps) {
    var svgIconProps = iconProps.svgSource;
    var width = iconProps.width, height = iconProps.height, color = iconProps.color;
    var viewBox = iconProps.svgSource.viewBox;
    var style = framework_1.mergeStyles(iconProps.style, rasterImageStyleCache({ width: width, height: height }, [width, height])[0]);
    // react-native-svg is still on 0.61, and their color prop doesn't handle ColorValue
    // If a color for the icon is not supplied, fall back to white or black depending on appearance
    // Tracked by issue #728
    var iconColor = downgradeColor(color);
    if (svgIconProps.src) {
        return (React.createElement(react_native_1.View, { style: style },
            React.createElement(svgIconProps.src, { viewBox: viewBox, width: width, height: height, color: iconColor })));
    }
    else if (svgIconProps.uri) {
        return (React.createElement(react_native_1.View, { style: style },
            React.createElement(react_native_svg_1.SvgUri, { uri: svgIconProps.uri, viewBox: viewBox, width: width, height: height, color: iconColor })));
    }
    else {
        return null;
    }
}
exports.Icon = framework_2.stagedComponent(function (props) {
    var theme = framework_1.useFluentTheme();
    return function (rest) {
        var color = props.color || theme.colors.buttonText;
        var baseProps = {
            color: color,
        };
        var newProps = framework_2.mergeProps(baseProps, props, rest);
        if (newProps.svgSource) {
            return renderSvg(newProps);
        }
        else if (newProps.fontSource) {
            return renderFontIcon(newProps);
        }
        else if (newProps.rasterImageSource) {
            return renderRasterImage(newProps);
        }
        else {
            return null;
        }
    };
});
exports.default = exports.Icon;
function downgradeColor(color) {
    if (typeof color === 'string') {
        return color;
    }
    return theming_utils_1.getCurrentAppearance(framework_1.useFluentTheme().host.appearance, 'light') === 'dark' ? '#FFFFFF' : '#000000';
}
//# sourceMappingURL=Icon.js.map