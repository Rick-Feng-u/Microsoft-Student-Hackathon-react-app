import * as React from 'react';
import { Image, Platform, View } from 'react-native';
import { Text } from '@fluentui-react-native/text';
import { mergeStyles, useFluentTheme } from '@fluentui-react-native/framework';
import { stagedComponent, mergeProps, getMemoCache } from '@fluentui-react-native/framework';
import { getCurrentAppearance } from '@fluentui-react-native/theming-utils';
import { SvgUri } from 'react-native-svg';
var rasterImageStyleCache = getMemoCache();
function renderRasterImage(iconProps) {
    var width = iconProps.width, height = iconProps.height, color = iconProps.color;
    var style = mergeStyles(iconProps.style, rasterImageStyleCache({ width: width, height: height, tintColor: color }, [width, height, color])[0]);
    return React.createElement(Image, { source: iconProps.rasterImageSource.src, style: style });
}
function fontFamilyFromFontSrcFile(fontSrcFile, fontFamily) {
    if (Platform.OS == 'windows') {
        // This `${family}#${path}` notation is specific to WPF
        var asset = Image.resolveAssetSource(+fontSrcFile);
        return fontFamily + "#" + asset.uri;
    }
    else {
        return fontFamily;
    }
}
var fontStyleMemoCache = getMemoCache();
function renderFontIcon(iconProps) {
    var fontSource = iconProps.fontSource;
    var style = fontStyleMemoCache({
        fontSrcFile: fontSource.fontSrcFile,
        fontFamily: fontSource.fontSrcFile != undefined
            ? fontFamilyFromFontSrcFile(fontSource.fontSrcFile, fontSource.fontFamily)
            : fontSource.fontFamily,
        fontSize: fontSource.fontSize,
        color: iconProps.color,
    }, [iconProps.color, fontSource.fontSrcFile, fontSource.fontFamily])[0];
    var char = String.fromCharCode(fontSource.codepoint);
    return React.createElement(Text, { style: style }, char);
}
function renderSvg(iconProps) {
    var svgIconProps = iconProps.svgSource;
    var width = iconProps.width, height = iconProps.height, color = iconProps.color;
    var viewBox = iconProps.svgSource.viewBox;
    var style = mergeStyles(iconProps.style, rasterImageStyleCache({ width: width, height: height }, [width, height])[0]);
    // react-native-svg is still on 0.61, and their color prop doesn't handle ColorValue
    // If a color for the icon is not supplied, fall back to white or black depending on appearance
    // Tracked by issue #728
    var iconColor = downgradeColor(color);
    if (svgIconProps.src) {
        return (React.createElement(View, { style: style },
            React.createElement(svgIconProps.src, { viewBox: viewBox, width: width, height: height, color: iconColor })));
    }
    else if (svgIconProps.uri) {
        return (React.createElement(View, { style: style },
            React.createElement(SvgUri, { uri: svgIconProps.uri, viewBox: viewBox, width: width, height: height, color: iconColor })));
    }
    else {
        return null;
    }
}
export var Icon = stagedComponent(function (props) {
    var theme = useFluentTheme();
    return function (rest) {
        var color = props.color || theme.colors.buttonText;
        var baseProps = {
            color: color,
        };
        var newProps = mergeProps(baseProps, props, rest);
        if (newProps.svgSource) {
            return renderSvg(newProps);
        }
        else if (newProps.fontSource) {
            return renderFontIcon(newProps);
        }
        else if (newProps.rasterImageSource) {
            return renderRasterImage(newProps);
        }
        else {
            return null;
        }
    };
});
export default Icon;
function downgradeColor(color) {
    if (typeof color === 'string') {
        return color;
    }
    return getCurrentAppearance(useFluentTheme().host.appearance, 'light') === 'dark' ? '#FFFFFF' : '#000000';
}
//# sourceMappingURL=Icon.js.map