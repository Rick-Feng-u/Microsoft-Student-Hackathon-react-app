"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var setAndForwardRef = require('./setAndForwardRef');
/**
 * A hook to add an imperative focus method to functional components which simply dispatch a focus command to
 * something View-derived on the native side.  In practice, this effectively applies to all components in our Win32
 * react native implementation.
 * @param forwardRef - The componentRef from your component's props where you're exposing a imperative focus method.
 * @returns The inner View-type you're rendering that you want to dispatch to & focus on.
 */
function useViewCommandFocus(forwardedRef) {
    /**
     * Set up the forwarding ref to enable adding the focus method.
     */
    var focusRef = React.useRef();
    var _setNativeRef = setAndForwardRef({
        getForwardedRef: function () { return forwardedRef; },
        setLocalRef: function (localRef) {
            focusRef.current = localRef;
            /**
             * Add focus() as a callable function to the forwarded reference.
             */
            if (localRef) {
                localRef.focus = function () {
                    react_native_1.UIManager.dispatchViewManagerCommand(react_native_1.findNodeHandle(localRef), react_native_1.UIManager.getViewManagerConfig('RCTView').Commands.focus, null);
                };
            }
        },
    });
    return _setNativeRef;
}
exports.useViewCommandFocus = useViewCommandFocus;
//# sourceMappingURL=useViewCommandFocus.win32.js.map