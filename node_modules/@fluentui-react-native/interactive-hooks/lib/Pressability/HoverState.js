/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict-local
 * @format
 */
'use strict';
import { Platform } from 'react-native';
var isEnabled = false;
if (Platform.OS === 'web') {
    var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
    if (canUseDOM) {
        /**
         * Web browsers emulate mouse events (and hover states) after touch events.
         * This code infers when the currently-in-use modality supports hover
         * (including for multi-modality devices) and considers "hover" to be enabled
         * if a mouse movement occurs more than 1 second after the last touch event.
         * This threshold is long enough to account for longer delays between the
         * browser firing touch and mouse events on low-powered devices.
         */
        var HOVER_THRESHOLD_MS_1 = 1000;
        var lastTouchTimestamp_1 = 0;
        var enableHover = function () {
            if (isEnabled || Date.now() - lastTouchTimestamp_1 < HOVER_THRESHOLD_MS_1) {
                return;
            }
            isEnabled = true;
        };
        var disableHover = function () {
            lastTouchTimestamp_1 = Date.now();
            if (isEnabled) {
                isEnabled = false;
            }
        };
        document.addEventListener('touchstart', disableHover, true);
        document.addEventListener('touchmove', disableHover, true);
        document.addEventListener('mousemove', enableHover, true);
    }
}
else if (Platform.OS === 'windows' || Platform.OS === 'win32' || Platform.OS === 'macos') {
    isEnabled = true;
}
export function isHoverEnabled() {
    return isEnabled;
}
//# sourceMappingURL=HoverState.js.map