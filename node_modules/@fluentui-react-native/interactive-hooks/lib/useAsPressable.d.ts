import { PressableProps } from 'react-native';
import { IPressableHooks, IWithPressableOptions, IPressState, IHoverState, IFocusState, IWithPressableEvents, IPressableState, PressablePropsExtended } from './useAsPressable.types';
/**
 * useAsPressable wraps the usePressability hook that will be available in RN 0.63 and beyond.  Once this library is on a recent enough
 * version of react-native this implementation can switch to using the official version.
 *
 * The useAsPressable hook adds a simple state change function for listening to hover, press, and focus events on the base pressability implementation
 * @param props - input props for the component, mixed in with pressable and pressability options
 */
export declare function useAsPressable<T extends object>(props: IWithPressableOptions<T>): IPressableHooks<T>;
/**
 * A more focused version of useAsPressable, if only one state is needed.  Note that if two or more states are needed then useAsPressable is better
 * as each of these calls will create a new instance of the Pressability class.
 * @param props - input props for the component
 */
export declare function useFocusState<T extends object>(props: IWithPressableOptions<T>): [IWithPressableEvents<T>, IFocusState];
/**
 * A more focused version of useAsPressable, if only one state is needed.  Note that if two or more states are needed then useAsPressable is better
 * as each of these calls will create a new instance of the Pressability class.
 * @param props - input props for the component
 */
export declare function usePressState<T extends object>(props: IWithPressableOptions<T>): [IWithPressableEvents<T>, IPressState];
/**
 * A more focused version of useAsPressable, if only one state is needed.  Note that if two or more states are needed then useAsPressable is better
 * as each of these calls will create a new instance of the Pressability class.
 * @param props - input props for the component
 */
export declare function useHoverState<T extends object>(props: IWithPressableOptions<T>): [IWithPressableEvents<T>, IHoverState];
/**
 * This routine hooks the props to pass to a Pressable component to obtain the current state of the Pressable as well as generating
 * state change updates when those props change. This allows a parent component to control the render of the whole component rather than having
 * to split the code between a child function or style function.
 *
 * @param props - props to pass to a Pressable component
 * @returns - modified props to pass into the Pressable as well as the current state with regards to hover, focus, and press
 */
export declare function usePressableState(props: PressablePropsExtended): {
    props: PressableProps;
    state: IPressableState;
};
//# sourceMappingURL=useAsPressable.d.ts.map