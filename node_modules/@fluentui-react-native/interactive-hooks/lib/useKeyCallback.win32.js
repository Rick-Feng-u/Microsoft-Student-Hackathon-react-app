var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import * as React from 'react';
/* Re-usable hook for an onKeyUp/onKeyDown event.
 ** PROPS:
 **       key - A string of the key you want to perform some action on. If undefined, always invokes userCallback
 **       userCallback - The function you want to be called once the key has been activated on key up
 ** RETURNS:
 **       onKeyEvent() - Callback to determine if key was pressed, if so, call userCallback
 */
export function useKeyCallback(userCallback) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    var onKeyEvent = React.useCallback(function (args) {
        if (userCallback !== undefined && (keys === undefined || keys.includes(args.nativeEvent.key))) {
            userCallback(args);
            args.stopPropagation();
        }
    }, __spreadArrays([userCallback], keys));
    return onKeyEvent;
}
//# sourceMappingURL=useKeyCallback.win32.js.map