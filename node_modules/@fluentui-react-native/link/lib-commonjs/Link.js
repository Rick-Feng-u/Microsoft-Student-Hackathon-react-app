"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var text_1 = require("@fluentui-react-native/text");
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var Link_types_1 = require("./Link.types");
var Link_settings_1 = require("./Link.settings");
var tokens_1 = require("@fluentui-react-native/tokens");
var interactive_hooks_1 = require("@fluentui-react-native/interactive-hooks");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
function useAsLink(userProps, ref) {
    var url = userProps.url, onPress = userProps.onPress, rest = __rest(userProps, ["url", "onPress"]);
    var _a = React.useState({ visited: false }), linkState = _a[0], setLinkState = _a[1];
    var linkOnPress = React.useCallback(function (e) {
        setLinkState({ visited: true });
        if (url) {
            react_native_1.Linking.openURL(url);
        }
        else if (onPress) {
            onPress(e);
        }
    }, [setLinkState, url, onPress]);
    // Ensure focus is placed on link after click
    var linkOnPressWithFocus = interactive_hooks_1.useOnPressWithFocus(ref, linkOnPress);
    var pressable = interactive_hooks_1.useAsPressable(__assign({ onPress: linkOnPressWithFocus }, rest));
    var onKeyUp = interactive_hooks_1.useKeyCallback(linkOnPress, ' ', 'Enter');
    var newState = __assign(__assign({}, pressable.state), linkState);
    var newProps = __assign(__assign(__assign({}, userProps), pressable.props), { onKeyUp: onKeyUp });
    return [newProps, newState];
}
exports.useAsLink = useAsLink;
exports.Link = foundation_compose_1.compose({
    displayName: Link_types_1.linkName,
    settings: Link_settings_1.settings,
    usePrepareProps: function (userProps, useStyling) {
        var defaultComponentRef = React.useRef(null);
        var content = userProps.content, onAccessibilityTap = userProps.onAccessibilityTap, _a = userProps.componentRef, componentRef = _a === void 0 ? defaultComponentRef : _a, rest = __rest(userProps, ["content", "onAccessibilityTap", "componentRef"]);
        var _b = useAsLink(rest, componentRef), linkProps = _b[0], linkState = _b[1];
        var onAccTap = onAccessibilityTap ? onAccessibilityTap : linkProps.onPress;
        var info = { content: !!content };
        var linkRef = interactive_hooks_1.useViewCommandFocus(componentRef);
        // grab the styling information, referencing the state as well as the props
        var styleProps = useStyling(userProps, function (override) { return linkState[override] || userProps[override]; });
        // create the merged slot props
        var slotProps = foundation_settings_1.mergeSettings(styleProps, {
            root: __assign(__assign({}, linkProps), { ref: linkRef, onAccessibilityTap: onAccTap }),
            content: { children: content },
        });
        return { slotProps: slotProps, state: __assign(__assign({}, linkState), info) };
    },
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var content = renderData.state && renderData.state.content;
        return children && children.length && children.length === 1 && children[0] !== undefined ? (foundation_composable_1.withSlots(Slots.root, null,
            content && foundation_composable_1.withSlots(Slots.content, null),
            children)) : (foundation_composable_1.withSlots(Slots.root, null, content && foundation_composable_1.withSlots(Slots.content, null)));
    },
    slots: {
        root: react_native_1.View,
        content: text_1.Text,
    },
    styles: {
        root: [],
        content: [tokens_1.foregroundColorTokens, tokens_1.textTokens, tokens_1.borderTokens],
    },
});
exports.default = exports.Link;
//# sourceMappingURL=Link.js.map