export declare type CacheEntry<T, TGet = any> = {
    /** stores the cached value if any */
    value?: T;
    /** entry used for undefined and null values, these both collapse to the same type */
    empty?: CacheEntry<TGet>;
    /** entry used for the case where the array of args is null or length 0 */
    noargs?: CacheEntry<TGet>;
    /** all remaining non-object types are keyed as strings for lookups */
    str?: {
        [key: string]: CacheEntry<TGet>;
    };
    /** object types are keyed in a weak map on object identity */
    obj?: WeakMap<object, TGet>;
};
/**
 * Given a base entry, either traverse or build the cache tree that matches the provided args
 *
 * @param entry - entry to use as the base of the cache walk
 * @param args - array of arguments to use to progress deeper into the cache
 */
export declare function getCacheEntry<T, TGet = any>(entry: CacheEntry<T>, args: any[]): CacheEntry<TGet>;
//# sourceMappingURL=getCacheEntry.d.ts.map