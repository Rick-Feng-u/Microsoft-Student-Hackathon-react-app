"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var getCacheEntry_1 = require("./getCacheEntry");
function compareResults(base, args, argsNoMatch) {
    var e1 = getCacheEntry_1.getCacheEntry(base, args);
    expect(getCacheEntry_1.getCacheEntry(base, args)).toBe(e1);
    if (argsNoMatch) {
        expect(getCacheEntry_1.getCacheEntry(base, argsNoMatch)).not.toBe(e1);
    }
}
describe('Memo cache unit tests', function () {
    test('undefined args to return noargs', function () {
        var base = {};
        expect(getCacheEntry_1.getCacheEntry(base, undefined)).toBe(base.noargs);
    });
    test('empty args array to return noargs entry', function () {
        var base = {};
        expect(getCacheEntry_1.getCacheEntry(base, [])).toBe(base.noargs);
    });
    test('undefined goes to empty entry', function () {
        var base = {};
        expect(getCacheEntry_1.getCacheEntry(base, [undefined])).toBe(base.empty);
    });
    test('null to go to empty entry', function () {
        var base = {};
        expect(getCacheEntry_1.getCacheEntry(base, [null])).toBe(base.empty);
    });
    test('string gets keyed correctly', function () {
        var base = {};
        var key = 'foo';
        expect(getCacheEntry_1.getCacheEntry(base, [key])).toBe(base.str[key]);
    });
    test('number gets keyed correctly', function () {
        var base = {};
        var val = 235;
        var key = val + '';
        expect(getCacheEntry_1.getCacheEntry(base, [val])).toBe(base.str[key]);
    });
    test('bool gets keyed correctly', function () {
        var base = {};
        var val = true;
        var key = val + '';
        expect(getCacheEntry_1.getCacheEntry(base, [val])).toBe(base.str[key]);
    });
    test('false bool gets keyed correctly', function () {
        var base = {};
        var val = false;
        var key = val + '';
        expect(getCacheEntry_1.getCacheEntry(base, [val])).toBe(base.str[key]);
    });
    test('object gets keyed correctly', function () {
        var base = {};
        var key = {};
        expect(getCacheEntry_1.getCacheEntry(base, [key])).toBe(base.obj.get(key));
    });
    test('function gets keyed correctly', function () {
        var base = {};
        var key = function () {
            return 'hello world';
        };
        expect(getCacheEntry_1.getCacheEntry(base, [key])).toBe(base.obj.get(key));
    });
    test('basic string retrieval', function () {
        compareResults({}, ['hello', 'world'], ['hello world']);
    });
    test('mixed keys with strings', function () {
        compareResults({}, ['hello', 1, true, undefined, 'world'], ['hello', 1, true, '', 'world']);
    });
    test('basic object matches', function () {
        var obj = {};
        compareResults({}, [obj]);
    });
    test('mixed object and string matches', function () {
        var obj = {};
        compareResults({}, [obj, 'hello', 1, 'world']);
    });
    test('mixed obj and strings with obj at end', function () {
        var obj = {};
        var obj2 = {};
        compareResults({}, ['hello', 1, 'world', obj], ['hello', 1, 'world', obj2]);
    });
    test('hybrid sets', function () {
        var obj = {};
        var obj2 = {};
        compareResults({}, ['hello', obj, 'world', 1, false, obj2, undefined]);
    });
    test('sub cache on object', function () {
        var obj = {};
        var args1 = ['hello', obj];
        var base = {};
        var subRoot = getCacheEntry_1.getCacheEntry(base, args1);
        var args2 = ['world', base];
        var target = getCacheEntry_1.getCacheEntry(subRoot, args2);
        expect(getCacheEntry_1.getCacheEntry(base, __spreadArrays(args1, args2))).toBe(target);
    });
});
//# sourceMappingURL=getCacheEntry.test.js.map