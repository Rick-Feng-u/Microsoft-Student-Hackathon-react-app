"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var getMemoCache_1 = require("./getMemoCache");
function getObjFactory() {
    var obj = { id: 0 };
    return function () { return ({
        id: obj.id++,
    }); };
}
describe('getMemoCache unit tests', function () {
    test('memoValue with null function', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var val = memoValue(null, ['foo', 'bar'])[0];
        expect(val).toBeNull();
    });
    test('memoValue with undefined', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var val = memoValue(undefined, ['foo', 'bar'])[0];
        expect(val).toBeUndefined();
    });
    test('memoValue with string', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var val = memoValue('foo', ['bar', 'baz'])[0];
        expect(val).toEqual('foo');
    });
    test('memoValue with object', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var obj = { foo: 'hello', bar: 2, baz: 'you' };
        var val = memoValue(obj, ['hello', obj])[0];
        expect(val).toBe(obj);
    });
    test('memoValue executes function', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var fn = getObjFactory();
        var v1 = fn();
        var v2 = memoValue(fn, ['bar', 'baz'])[0];
        expect(v1).not.toBe(v2);
        expect(v1.id).not.toEqual(v2.id);
    });
    test('memo calls function only once', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var fn = getObjFactory();
        var keys = ['hello', 'world'];
        var o1 = memoValue(fn, keys)[0];
        var o2 = memoValue(fn, keys)[0];
        expect(o2).toBe(o1);
    });
    test('memo calls function only once for empty inputs', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var fn = getObjFactory();
        var o1 = memoValue(fn, undefined)[0];
        var o2 = memoValue(fn, undefined)[0];
        expect(o2).toBe(o1);
    });
    test('sub caches are separate', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var base1 = {};
        var base2 = {};
        var _a = memoValue(null, [base1]), getCache1 = _a[1];
        var _b = memoValue(null, [base2]), getCache2 = _b[1];
        var objKey = {};
        var fn = getObjFactory();
        var o1 = getCache1(fn, [objKey])[0];
        var o2 = getCache2(fn, [objKey])[0];
        var o3 = getCache2(fn, [objKey])[0];
        expect(o1).not.toBe(o2);
        expect(o3).toBe(o2);
    });
    test('sub caches work on branches', function () {
        var memoValue = getMemoCache_1.getMemoCache();
        var keys1 = [{}, 2, 'hello'];
        var keys2 = [{}, true];
        var fn = getObjFactory();
        var _a = memoValue(null, keys1), getMemoValue = _a[1];
        var val1 = getMemoValue(fn, keys2)[0];
        var val2 = memoValue(fn, __spreadArrays(keys1, keys2))[0];
        expect(val2).toBe(val1);
    });
});
//# sourceMappingURL=getMemoCache.test.js.map