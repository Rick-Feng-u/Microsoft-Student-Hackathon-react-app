"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var react_1 = __importStar(require("react"));
var button_1 = require("@fluentui-react-native/button");
var contextual_menu_1 = require("@fluentui-react-native/contextual-menu");
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
var tokens_1 = require("@fluentui-react-native/tokens");
var react_native_svg_1 = require("react-native-svg");
var MenuButton_style_1 = require("./MenuButton.style");
var MenuButton_types_1 = require("./MenuButton.types");
exports.MenuButton = foundation_compose_1.compose({
    displayName: MenuButton_types_1.MenuButtonName,
    usePrepareProps: function (userProps, useStyling) {
        var menuItems = userProps.menuItems, content = userProps.content, startIcon = userProps.startIcon, disabled = userProps.disabled, onItemClick = userProps.onItemClick, contextualMenu = userProps.contextualMenu, primary = userProps.primary;
        var stdBtnRef = react_1.useRef(null);
        var _a = react_1.useState(false), showContextualMenu = _a[0], setShowContextualMenu = _a[1];
        var onDismiss = react_1.useCallback(function () {
            setShowContextualMenu(false);
        }, [setShowContextualMenu]);
        var toggleShowContextualMenu = react_1.useCallback(function () {
            setShowContextualMenu(!showContextualMenu);
        }, [showContextualMenu, setShowContextualMenu]);
        var menuItemsUpdated = menuItems.map(function (item) {
            if (item.hasSubmenu) {
                var _a = react_1.useState(false), showSubmenu_1 = _a[0], setShowSubmenu_1 = _a[1];
                var toggleShowSubmenu = react_1.default.useCallback(function () {
                    setShowSubmenu_1(!showSubmenu_1);
                }, [showSubmenu_1, setShowSubmenu_1]);
                var onDismissSubmenu = react_1.default.useCallback(function () {
                    setShowSubmenu_1(false);
                }, [setShowSubmenu_1]);
                var _b = item.onHoverIn, onHoverIn = _b === void 0 ? toggleShowSubmenu : _b, _c = item.submenuProps, submenuProps = _c === void 0 ? {} : _c, restItems = __rest(item, ["onHoverIn", "submenuProps"]);
                var _d = submenuProps.onDismiss, onDismiss_1 = _d === void 0 ? onDismissSubmenu : _d, _e = submenuProps.setShowMenu, setShowMenu = _e === void 0 ? toggleShowSubmenu : _e, restSubmenuProps = __rest(submenuProps, ["onDismiss", "setShowMenu"]);
                var menuItemUpdated = __assign(__assign({}, restItems), { onHoverIn: onHoverIn, showSubmenu: item.showSubmenu ? showSubmenu_1 : undefined, submenuProps: __assign(__assign({}, restSubmenuProps), { onDismiss: onDismiss_1, setShowMenu: setShowMenu }) });
                return menuItemUpdated;
            }
            return item;
        });
        var state = {
            context: {
                showContextualMenu: !!showContextualMenu,
                primary: !!primary,
            },
        };
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var buttonProps = {
            content: content,
            disabled: disabled,
            startIcon: startIcon,
            componentRef: stdBtnRef,
            onClick: toggleShowContextualMenu,
        };
        var slotProps = foundation_settings_1.mergeSettings(styleProps, {
            root: {},
            button: buttonProps,
            primaryButton: buttonProps,
            contextualMenu: __assign({ onItemClick: onItemClick, target: stdBtnRef, onDismiss: onDismiss, setShowMenu: toggleShowContextualMenu }, contextualMenu),
            contextualMenuItems: {
                menuItems: menuItemsUpdated,
            },
        });
        return { slotProps: slotProps, state: state };
    },
    slots: {
        root: react_1.default.Fragment,
        button: { slotType: button_1.Button },
        primaryButton: { slotType: button_1.PrimaryButton },
        contextualMenu: { slotType: contextual_menu_1.ContextualMenu },
        contextualMenuItems: react_1.default.Fragment,
        chevronSvg: react_native_svg_1.SvgXml,
    },
    styles: {
        contextualMenu: [tokens_1.backgroundColorTokens, tokens_1.borderTokens],
        button: [tokens_1.backgroundColorTokens, tokens_1.borderTokens],
    },
    render: function (Slots, renderData) {
        if (!(renderData.state && renderData.slotProps)) {
            return null;
        }
        var context = renderData.state.context;
        var menuItems = renderData.slotProps.contextualMenuItems ? renderData.slotProps.contextualMenuItems.menuItems : [];
        var chevronColor = context.primary ? MenuButton_style_1.primaryIconColor : MenuButton_style_1.defaultIconColor;
        var chevronXml = "\n    <svg width=\"12\" height=\"16\" viewBox=\"0 0 11 6\" color=" + chevronColor + ">\n      <path fill='currentColor' d='M0.646447 0.646447C0.841709 0.451184 1.15829 0.451184 1.35355 0.646447L5.5 4.79289L9.64645 0.646447C9.84171 0.451185 10.1583 0.451185 10.3536 0.646447C10.5488 0.841709 10.5488 1.15829 10.3536 1.35355L5.85355 5.85355C5.65829 6.04882 5.34171 6.04882 5.14645 5.85355L0.646447 1.35355C0.451184 1.15829 0.451184 0.841709 0.646447 0.646447Z' />\n    </svg>";
        return (foundation_composable_1.withSlots(Slots.root, null,
            context.primary ? (foundation_composable_1.withSlots(Slots.primaryButton, null,
                foundation_composable_1.withSlots(Slots.chevronSvg, { xml: chevronXml }))) : (foundation_composable_1.withSlots(Slots.button, null,
                foundation_composable_1.withSlots(Slots.chevronSvg, { xml: chevronXml }))),
            context.showContextualMenu && (foundation_composable_1.withSlots(Slots.contextualMenu, null, menuItems.map(function (menuItem) {
                var hasSubmenu = menuItem.hasSubmenu, submenuProps = menuItem.submenuProps, showSubmenu = menuItem.showSubmenu, componentRef = menuItem.componentRef, submenuItems = menuItem.submenuItems, items = __rest(menuItem, ["hasSubmenu", "submenuProps", "showSubmenu", "componentRef", "submenuItems"]);
                return hasSubmenu && submenuItems ? (foundation_composable_1.withSlots(Slots.contextualMenuItems, null,
                    foundation_composable_1.withSlots(contextual_menu_1.SubmenuItem, __assign({ componentRef: componentRef }, items)),
                    showSubmenu && (foundation_composable_1.withSlots(contextual_menu_1.Submenu, __assign({ target: componentRef }, submenuProps), submenuItems.map(function (submenuItem) { return (foundation_composable_1.withSlots(contextual_menu_1.ContextualMenuItem, __assign({ key: submenuItem.itemKey }, submenuItem))); }))))) : (foundation_composable_1.withSlots(contextual_menu_1.ContextualMenuItem, __assign({ key: items.itemKey }, items)));
            })))));
    },
});
exports.default = exports.MenuButton;
//# sourceMappingURL=MenuButton.js.map