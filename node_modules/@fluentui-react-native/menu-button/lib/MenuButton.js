var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx withSlots */
import React, { useRef, useState, useCallback } from 'react';
import { PrimaryButton, Button } from '@fluentui-react-native/button';
import { ContextualMenu, ContextualMenuItem, SubmenuItem, Submenu } from '@fluentui-react-native/contextual-menu';
import { compose } from '@uifabricshared/foundation-compose';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { withSlots } from '@uifabricshared/foundation-composable';
import { backgroundColorTokens, borderTokens } from '@fluentui-react-native/tokens';
import { SvgXml } from 'react-native-svg';
import { defaultIconColor, primaryIconColor } from './MenuButton.style';
import { MenuButtonName, } from './MenuButton.types';
export var MenuButton = compose({
    displayName: MenuButtonName,
    usePrepareProps: function (userProps, useStyling) {
        var menuItems = userProps.menuItems, content = userProps.content, startIcon = userProps.startIcon, disabled = userProps.disabled, onItemClick = userProps.onItemClick, contextualMenu = userProps.contextualMenu, primary = userProps.primary;
        var stdBtnRef = useRef(null);
        var _a = useState(false), showContextualMenu = _a[0], setShowContextualMenu = _a[1];
        var onDismiss = useCallback(function () {
            setShowContextualMenu(false);
        }, [setShowContextualMenu]);
        var toggleShowContextualMenu = useCallback(function () {
            setShowContextualMenu(!showContextualMenu);
        }, [showContextualMenu, setShowContextualMenu]);
        var menuItemsUpdated = menuItems.map(function (item) {
            if (item.hasSubmenu) {
                var _a = useState(false), showSubmenu_1 = _a[0], setShowSubmenu_1 = _a[1];
                var toggleShowSubmenu = React.useCallback(function () {
                    setShowSubmenu_1(!showSubmenu_1);
                }, [showSubmenu_1, setShowSubmenu_1]);
                var onDismissSubmenu = React.useCallback(function () {
                    setShowSubmenu_1(false);
                }, [setShowSubmenu_1]);
                var _b = item.onHoverIn, onHoverIn = _b === void 0 ? toggleShowSubmenu : _b, _c = item.submenuProps, submenuProps = _c === void 0 ? {} : _c, restItems = __rest(item, ["onHoverIn", "submenuProps"]);
                var _d = submenuProps.onDismiss, onDismiss_1 = _d === void 0 ? onDismissSubmenu : _d, _e = submenuProps.setShowMenu, setShowMenu = _e === void 0 ? toggleShowSubmenu : _e, restSubmenuProps = __rest(submenuProps, ["onDismiss", "setShowMenu"]);
                var menuItemUpdated = __assign(__assign({}, restItems), { onHoverIn: onHoverIn, showSubmenu: item.showSubmenu ? showSubmenu_1 : undefined, submenuProps: __assign(__assign({}, restSubmenuProps), { onDismiss: onDismiss_1, setShowMenu: setShowMenu }) });
                return menuItemUpdated;
            }
            return item;
        });
        var state = {
            context: {
                showContextualMenu: !!showContextualMenu,
                primary: !!primary,
            },
        };
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var buttonProps = {
            content: content,
            disabled: disabled,
            startIcon: startIcon,
            componentRef: stdBtnRef,
            onClick: toggleShowContextualMenu,
        };
        var slotProps = mergeSettings(styleProps, {
            root: {},
            button: buttonProps,
            primaryButton: buttonProps,
            contextualMenu: __assign({ onItemClick: onItemClick, target: stdBtnRef, onDismiss: onDismiss, setShowMenu: toggleShowContextualMenu }, contextualMenu),
            contextualMenuItems: {
                menuItems: menuItemsUpdated,
            },
        });
        return { slotProps: slotProps, state: state };
    },
    slots: {
        root: React.Fragment,
        button: { slotType: Button },
        primaryButton: { slotType: PrimaryButton },
        contextualMenu: { slotType: ContextualMenu },
        contextualMenuItems: React.Fragment,
        chevronSvg: SvgXml,
    },
    styles: {
        contextualMenu: [backgroundColorTokens, borderTokens],
        button: [backgroundColorTokens, borderTokens],
    },
    render: function (Slots, renderData) {
        if (!(renderData.state && renderData.slotProps)) {
            return null;
        }
        var context = renderData.state.context;
        var menuItems = renderData.slotProps.contextualMenuItems ? renderData.slotProps.contextualMenuItems.menuItems : [];
        var chevronColor = context.primary ? primaryIconColor : defaultIconColor;
        var chevronXml = "\n    <svg width=\"12\" height=\"16\" viewBox=\"0 0 11 6\" color=" + chevronColor + ">\n      <path fill='currentColor' d='M0.646447 0.646447C0.841709 0.451184 1.15829 0.451184 1.35355 0.646447L5.5 4.79289L9.64645 0.646447C9.84171 0.451185 10.1583 0.451185 10.3536 0.646447C10.5488 0.841709 10.5488 1.15829 10.3536 1.35355L5.85355 5.85355C5.65829 6.04882 5.34171 6.04882 5.14645 5.85355L0.646447 1.35355C0.451184 1.15829 0.451184 0.841709 0.646447 0.646447Z' />\n    </svg>";
        return (withSlots(Slots.root, null,
            context.primary ? (withSlots(Slots.primaryButton, null,
                withSlots(Slots.chevronSvg, { xml: chevronXml }))) : (withSlots(Slots.button, null,
                withSlots(Slots.chevronSvg, { xml: chevronXml }))),
            context.showContextualMenu && (withSlots(Slots.contextualMenu, null, menuItems.map(function (menuItem) {
                var hasSubmenu = menuItem.hasSubmenu, submenuProps = menuItem.submenuProps, showSubmenu = menuItem.showSubmenu, componentRef = menuItem.componentRef, submenuItems = menuItem.submenuItems, items = __rest(menuItem, ["hasSubmenu", "submenuProps", "showSubmenu", "componentRef", "submenuItems"]);
                return hasSubmenu && submenuItems ? (withSlots(Slots.contextualMenuItems, null,
                    withSlots(SubmenuItem, __assign({ componentRef: componentRef }, items)),
                    showSubmenu && (withSlots(Submenu, __assign({ target: componentRef }, submenuProps), submenuItems.map(function (submenuItem) { return (withSlots(ContextualMenuItem, __assign({ key: submenuItem.itemKey }, submenuItem))); }))))) : (withSlots(ContextualMenuItem, __assign({ key: items.itemKey }, items)));
            })))));
    },
});
export default MenuButton;
//# sourceMappingURL=MenuButton.js.map