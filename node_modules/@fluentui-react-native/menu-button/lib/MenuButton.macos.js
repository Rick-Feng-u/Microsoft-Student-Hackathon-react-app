var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** @jsx withSlots */
import { Image } from 'react-native';
import { compose } from '@uifabricshared/foundation-compose';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { withSlots } from '@uifabricshared/foundation-composable';
import { backgroundColorTokens, borderTokens } from '@fluentui-react-native/tokens';
import { ensureNativeComponent } from '@fluentui-react-native/component-cache';
import { createIconProps } from '@fluentui-react-native/interactive-hooks';
import { MenuButtonName, } from './MenuButton.types';
var NativeMenuButton = ensureNativeComponent('FRNMenuButton');
export var MenuButton = compose({
    displayName: MenuButtonName,
    usePrepareProps: function (userProps, useStyling) {
        var menuItems = userProps.menuItems, content = userProps.content, startIcon = userProps.startIcon, disabled = userProps.disabled, onItemClick = userProps.onItemClick, style = userProps.style;
        function extractResolvedImageSourceFromIcon(icon) {
            var _a;
            if (!icon) {
                return null;
            }
            // GH #931, only PNG images are supported on the macOS MenuButton
            var iconProps = createIconProps(icon);
            var imageSource = Image.resolveAssetSource((_a = iconProps === null || iconProps === void 0 ? void 0 : iconProps.rasterImageSource) === null || _a === void 0 ? void 0 : _a.src);
            return imageSource;
        }
        var imageSource = extractResolvedImageSourceFromIcon(startIcon);
        // reroute the native component's OnItemClick event to MenuButtons's onItemClick
        var OnItemClickRerouted = function (event) {
            if (onItemClick != null) {
                onItemClick(event.nativeEvent.key);
            }
        };
        // reroute the native component's onSubmenuItemClick event to each MenuButtonItem's onItemClick
        var OnSubmenuItemClickRerouted = function (event) {
            var _a;
            // Grab the index of the menu item that hosts the submenu to look up the correct callback
            var menuItemIndex = event.nativeEvent.index;
            var onSubmenuItemClick = (_a = menuItems[menuItemIndex].submenuProps) === null || _a === void 0 ? void 0 : _a.onItemClick;
            if (onSubmenuItemClick != null) {
                onSubmenuItemClick(event.nativeEvent.key);
            }
        };
        // Transform the menuItem props to match the native props of NSMenuItem
        function transformMenuItems(menuItems) {
            var nativeMenuItems = [];
            menuItems.forEach(function (item) {
                var imageSource = extractResolvedImageSourceFromIcon(item.icon);
                // Recursively parse submenus
                var submenu = item.hasSubmenu ? transformMenuItems(item.submenuItems) : null;
                var transformedItem = __assign(__assign({ title: item.text }, (imageSource && { image: imageSource })), { enabled: !item.disabled, tooltip: item.title, identifier: item.itemKey, hasSubmenu: item.hasSubmenu, submenu: submenu });
                nativeMenuItems.push(transformedItem);
            });
            return nativeMenuItems;
        }
        // Default style if none from user props
        var rootStyleProp = style !== null && style !== void 0 ? style : {
            width: 160,
            height: 32,
        };
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var slotProps = mergeSettings(styleProps, {
            root: __assign(__assign({ content: content, enabled: !disabled }, (imageSource && { image: imageSource })), { menu: transformMenuItems(menuItems), onItemClick: OnItemClickRerouted, onSubmenuItemClick: OnSubmenuItemClickRerouted, style: rootStyleProp }),
        });
        var state = {
            context: {},
        };
        return { slotProps: slotProps, state: state };
    },
    slots: {
        root: NativeMenuButton,
    },
    styles: {
        contextualMenu: [backgroundColorTokens, borderTokens],
        button: [backgroundColorTokens, borderTokens],
    },
    render: function (Slots, renderData) {
        if (!(renderData.state && renderData.slotProps)) {
            return null;
        }
        return withSlots(Slots.root, null);
    },
});
export default MenuButton;
//# sourceMappingURL=MenuButton.macos.js.map