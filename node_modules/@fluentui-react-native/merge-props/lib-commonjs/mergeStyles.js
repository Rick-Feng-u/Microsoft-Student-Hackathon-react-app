"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_merge_1 = require("@fluentui-react-native/immutable-merge");
var memo_cache_1 = require("@fluentui-react-native/memo-cache");
/**
 * Take a react-native style, which may be a recursive array, and return as a flattened
 * style.  This is analagous to the flatten routine that is part of the style sheet API
 *
 * @param style - StyleProp<TStyle> to flatten, this can be a TStyle or an array
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function flattenStyle(style) {
    return Array.isArray(style) ? immutable_merge_1.immutableMerge.apply(void 0, style.map(function (v) { return flattenStyle(v); })) : style || {};
}
exports.flattenStyle = flattenStyle;
/**
 * Merge styles together into a single flat object and optionally finalize them, can also be used to finalize a single style
 *
 * @param styles - array of styles to merge together.  The styles will be flattened as part of the process
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function mergeAndFlattenStyles() {
    var styles = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        styles[_i] = arguments[_i];
    }
    // baseline merge and flatten the objects
    return immutable_merge_1.immutableMerge.apply(void 0, styles.map(function (styleProp) {
        return flattenStyle(styleProp);
    }));
}
exports.mergeAndFlattenStyles = mergeAndFlattenStyles;
var _styleCache = memo_cache_1.getMemoCache();
// eslint-disable-next-line @typescript-eslint/ban-types
function mergeStyles() {
    var styles = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        styles[_i] = arguments[_i];
    }
    // filter the style set to just objects (which might be arrays or plain style objects)
    // eslint-disable-next-line @typescript-eslint/ban-types
    var inputs = styles.filter(function (s) { return typeof s === 'object'; });
    // now memo the results if there is more than one element or if the one element is an array
    return inputs.length > 1 || (inputs.length === 1 && Array.isArray(inputs[0]))
        ? _styleCache(function () { return mergeAndFlattenStyles.apply(void 0, __spreadArrays([undefined], inputs)); }, inputs)[0]
        : inputs[0] || {};
}
exports.mergeStyles = mergeStyles;
//# sourceMappingURL=mergeStyles.js.map