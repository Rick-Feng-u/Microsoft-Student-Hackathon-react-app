var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { immutableMergeCore } from '@fluentui-react-native/immutable-merge';
import { mergeStyles } from './mergeStyles';
/**
 * Props will not deeply merge with the exception of a style property.  Also className needs to be handled specially.
 */
var mergePropsOptions = {
    className: function () {
        var names = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            names[_i] = arguments[_i];
        }
        return names.filter(function (v) { return v && typeof v === 'string'; }).join(' ');
    },
    style: mergeStyles,
};
/** take an any array and turn it into an array of objects */
// eslint-disable-next-line @typescript-eslint/ban-types
function filterAsObject(targets) {
    return targets.filter(function (t) { return typeof t === 'object'; });
}
/**
 * Merge props together, flattening and merging styles as appropriate
 * @param props - props to merge together
 */
export function mergeProps() {
    var props = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        props[_i] = arguments[_i];
    }
    return immutableMergeCore.apply(void 0, __spreadArrays([mergePropsOptions], filterAsObject(props)));
}
//# sourceMappingURL=mergeProps.js.map