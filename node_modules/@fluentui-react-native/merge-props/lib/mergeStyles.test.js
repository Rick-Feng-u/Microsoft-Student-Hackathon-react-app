import { flattenStyle, mergeAndFlattenStyles, mergeStyles } from './mergeStyles';
var s1 = [
    { backgroundColor: 'blue' },
    [{ color: 'red', borderWidth: 1 }, { fontFamily: 'segoe' }, [{ backgroundColor: 'bodyBackground' }]],
];
var s1flatten = {
    backgroundColor: 'bodyBackground',
    color: 'red',
    borderWidth: 1,
    fontFamily: 'segoe',
};
var s2 = {
    borderWidth: 2,
    fontFamily: 'primary',
    color: 'bodyText',
};
var sMerged = {
    backgroundColor: 'bodyBackground',
    borderWidth: 2,
    fontFamily: 'primary',
    color: 'bodyText',
};
var sSelector = {
    borderWidth: 1,
    ':hover': {
        borderWidth: 2,
        fontFamily: 'primary',
    },
};
var sSelector2 = {
    backgroundColor: 'white',
    ':hover': {
        backgroundColor: 'black',
        borderWidth: 3,
    },
};
var sArraySelector = [[sSelector]];
var sArraySelector2 = [sSelector2];
var sMergedSelectors = {
    borderWidth: 1,
    backgroundColor: 'white',
    ':hover': {
        borderWidth: 3,
        fontFamily: 'primary',
        backgroundColor: 'black',
    },
};
describe('Style flatten and merge tests', function () {
    test('flatten recursive arrays', function () {
        var flattened = flattenStyle(s1);
        expect(flattened).toEqual(s1flatten);
        expect(flattened).not.toBe(s1);
    });
    test('flatten flat style returns style', function () {
        var flattened = flattenStyle(s2);
        expect(flattened).toBe(s2);
    });
    test('merge also flattens', function () {
        var merged = mergeAndFlattenStyles(undefined, undefined, s1, s2);
        expect(merged).toEqual(sMerged);
    });
    test('merge with sub objects', function () {
        var merged = mergeAndFlattenStyles(undefined, undefined, sSelector, sSelector2);
        expect(merged).toEqual(sMergedSelectors);
    });
    test('merge sub objects in arrays', function () {
        var merged = mergeAndFlattenStyles(undefined, undefined, sArraySelector, sArraySelector2);
        expect(merged).toEqual(sMergedSelectors);
    });
    test('memo recursive arrays', function () {
        var flattened = mergeStyles(s1);
        var flattened2 = mergeStyles(s1);
        expect(flattened).toEqual(s1flatten);
        expect(flattened2).toBe(flattened);
    });
    test('memo flat style', function () {
        var flattened = mergeStyles(s2);
        var flattened2 = mergeStyles(s2);
        expect(flattened).toBe(s2);
        expect(flattened2).toBe(flattened);
    });
    test('memo and flatten multiple', function () {
        var flattened = mergeStyles(s1, s2);
        var flattened2 = mergeStyles(s1, s2);
        expect(flattened).toEqual(sMerged);
        expect(flattened2).toBe(flattened);
    });
    test('memo styles ignores undefined values', function () {
        var result1 = mergeStyles(s1, s2, undefined, s1flatten);
        var result2 = mergeStyles(s1, undefined, s2, s1flatten);
        expect(result2).toBe(result1);
    });
});
//# sourceMappingURL=mergeStyles.test.js.map