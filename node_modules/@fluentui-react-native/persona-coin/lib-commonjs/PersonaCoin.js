"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var react_native_1 = require("react-native");
var PersonaCoin_types_1 = require("./PersonaCoin.types");
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var adapters_1 = require("@fluentui-react-native/adapters");
var PersonaCoin_settings_1 = require("./PersonaCoin.settings");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var PersonaCoin_helpers_1 = require("./PersonaCoin.helpers");
var tokens_1 = require("@fluentui-react-native/tokens");
var PersonaCoin_tokens_root_1 = require("./PersonaCoin.tokens.root");
var PersonaCoin_tokens_initials_1 = require("./PersonaCoin.tokens.initials");
var PersonaCoin_tokens_initialsBackground_1 = require("./PersonaCoin.tokens.initialsBackground");
var PersonaCoin_tokens_photo_1 = require("./PersonaCoin.tokens.photo");
var PersonaCoin_tokens_icon_1 = require("./PersonaCoin.tokens.icon");
var PersonaCoin_tokens_ring_1 = require("./PersonaCoin.tokens.ring");
function usePrepareForProps(props, useStyling) {
    var imageUrl = props.imageUrl, imageDescription = props.imageDescription, initials = props.initials, presence = props.presence, isOutOfOffice = props.isOutOfOffice, ring = props.ring, rest = __rest(props, ["imageUrl", "imageDescription", "initials", "presence", "isOutOfOffice", "ring"]);
    var personaPhotoSource = imageUrl === undefined
        ? undefined
        : {
            uri: imageUrl,
        };
    var iconSource = presence === undefined ? undefined : PersonaCoin_helpers_1.getPresenceIconSource(presence, isOutOfOffice || false);
    var showRing = !!ring;
    var transparentRing = !!(ring === null || ring === void 0 ? void 0 : ring.transparent);
    return {
        slotProps: foundation_settings_1.mergeSettings(useStyling(props), {
            root: __assign({}, rest),
            initials: {
                children: initials,
            },
            photo: {
                accessibilityLabel: imageDescription,
            },
        }),
        state: {
            iconSource: iconSource,
            personaPhotoSource: personaPhotoSource,
            showRing: showRing,
            transparentRing: transparentRing,
        },
    };
}
var render = function (Slots, renderData) {
    if (!renderData.state) {
        return null;
    }
    var _a = renderData.state, personaPhotoSource = _a.personaPhotoSource, iconSource = _a.iconSource, showRing = _a.showRing, transparentRing = _a.transparentRing;
    return (foundation_composable_1.withSlots(Slots.root, null,
        personaPhotoSource ? (foundation_composable_1.withSlots(Slots.photo, { source: personaPhotoSource })) : (foundation_composable_1.withSlots(Slots.initialsBackground, null,
            foundation_composable_1.withSlots(Slots.initials, null))),
        showRing && !transparentRing && foundation_composable_1.withSlots(Slots.ring, null),
        showRing && foundation_composable_1.withSlots(Slots.glow, null),
        !!iconSource && !!iconSource.uri && foundation_composable_1.withSlots(Slots.icon, { source: iconSource })));
};
exports.PersonaCoin = foundation_compose_1.compose({
    displayName: PersonaCoin_types_1.personaCoinName,
    usePrepareProps: usePrepareForProps,
    settings: PersonaCoin_settings_1.settings,
    slots: {
        root: {
            slotType: react_native_1.View,
            filter: adapters_1.filterViewProps,
        },
        photo: {
            slotType: react_native_1.Image,
            filter: adapters_1.filterImageProps,
        },
        initials: react_native_1.Text,
        initialsBackground: {
            slotType: react_native_1.View,
            filter: adapters_1.filterViewProps,
        },
        icon: {
            slotType: react_native_1.Image,
            filter: adapters_1.filterImageProps,
        },
        ring: {
            slotType: react_native_1.View,
            filter: adapters_1.filterViewProps,
        },
        glow: {
            slotType: react_native_1.View,
            filter: adapters_1.filterViewProps,
        },
    },
    render: render,
    styles: {
        root: [PersonaCoin_tokens_root_1.buildRootStyles],
        initials: [tokens_1.foregroundColorTokens, PersonaCoin_tokens_initials_1.buildInitialsStyles],
        initialsBackground: [PersonaCoin_tokens_initialsBackground_1.buildInitialsBackgroundStyles],
        photo: [PersonaCoin_tokens_photo_1.buildPhotoStyles],
        icon: [PersonaCoin_tokens_icon_1.buildIconStyles],
        ring: [PersonaCoin_tokens_ring_1.buildRingStyles],
        glow: [PersonaCoin_tokens_ring_1.buildGlowStyles],
    },
});
//# sourceMappingURL=PersonaCoin.js.map