var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx withSlots */
import { Image, View, Text } from 'react-native';
import { personaCoinName, } from './PersonaCoin.types';
import { compose } from '@uifabricshared/foundation-compose';
import { filterViewProps, filterImageProps } from '@fluentui-react-native/adapters';
import { settings } from './PersonaCoin.settings';
import { withSlots } from '@uifabricshared/foundation-composable';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { getPresenceIconSource } from './PersonaCoin.helpers';
import { foregroundColorTokens } from '@fluentui-react-native/tokens';
import { buildRootStyles } from './PersonaCoin.tokens.root';
import { buildInitialsStyles } from './PersonaCoin.tokens.initials';
import { buildInitialsBackgroundStyles } from './PersonaCoin.tokens.initialsBackground';
import { buildPhotoStyles } from './PersonaCoin.tokens.photo';
import { buildIconStyles } from './PersonaCoin.tokens.icon';
import { buildGlowStyles, buildRingStyles } from './PersonaCoin.tokens.ring';
function usePrepareForProps(props, useStyling) {
    var imageUrl = props.imageUrl, imageDescription = props.imageDescription, initials = props.initials, presence = props.presence, isOutOfOffice = props.isOutOfOffice, ring = props.ring, rest = __rest(props, ["imageUrl", "imageDescription", "initials", "presence", "isOutOfOffice", "ring"]);
    var personaPhotoSource = imageUrl === undefined
        ? undefined
        : {
            uri: imageUrl,
        };
    var iconSource = presence === undefined ? undefined : getPresenceIconSource(presence, isOutOfOffice || false);
    var showRing = !!ring;
    var transparentRing = !!(ring === null || ring === void 0 ? void 0 : ring.transparent);
    return {
        slotProps: mergeSettings(useStyling(props), {
            root: __assign({}, rest),
            initials: {
                children: initials,
            },
            photo: {
                accessibilityLabel: imageDescription,
            },
        }),
        state: {
            iconSource: iconSource,
            personaPhotoSource: personaPhotoSource,
            showRing: showRing,
            transparentRing: transparentRing,
        },
    };
}
var render = function (Slots, renderData) {
    if (!renderData.state) {
        return null;
    }
    var _a = renderData.state, personaPhotoSource = _a.personaPhotoSource, iconSource = _a.iconSource, showRing = _a.showRing, transparentRing = _a.transparentRing;
    return (withSlots(Slots.root, null,
        personaPhotoSource ? (withSlots(Slots.photo, { source: personaPhotoSource })) : (withSlots(Slots.initialsBackground, null,
            withSlots(Slots.initials, null))),
        showRing && !transparentRing && withSlots(Slots.ring, null),
        showRing && withSlots(Slots.glow, null),
        !!iconSource && !!iconSource.uri && withSlots(Slots.icon, { source: iconSource })));
};
export var PersonaCoin = compose({
    displayName: personaCoinName,
    usePrepareProps: usePrepareForProps,
    settings: settings,
    slots: {
        root: {
            slotType: View,
            filter: filterViewProps,
        },
        photo: {
            slotType: Image,
            filter: filterImageProps,
        },
        initials: Text,
        initialsBackground: {
            slotType: View,
            filter: filterViewProps,
        },
        icon: {
            slotType: Image,
            filter: filterImageProps,
        },
        ring: {
            slotType: View,
            filter: filterViewProps,
        },
        glow: {
            slotType: View,
            filter: filterViewProps,
        },
    },
    render: render,
    styles: {
        root: [buildRootStyles],
        initials: [foregroundColorTokens, buildInitialsStyles],
        initialsBackground: [buildInitialsBackgroundStyles],
        photo: [buildPhotoStyles],
        icon: [buildIconStyles],
        ring: [buildRingStyles],
        glow: [buildGlowStyles],
    },
});
//# sourceMappingURL=PersonaCoin.js.map