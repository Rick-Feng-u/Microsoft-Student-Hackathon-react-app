"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var Persona_types_1 = require("./Persona.types");
var Persona_settings_1 = require("./Persona.settings");
var react_native_1 = require("react-native");
var adapters_1 = require("@fluentui-react-native/adapters");
var persona_coin_1 = require("@fluentui-react-native/persona-coin");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var Persona_tokens_root_1 = require("./Persona.tokens.root");
var Persona_tokens_texts_1 = require("./Persona.tokens.texts");
var Persona_tokens_coin_1 = require("./Persona.tokens.coin");
var tokens_1 = require("@fluentui-react-native/tokens");
var Persona_tokens_stack_1 = require("./Persona.tokens.stack");
function usePrepareForProps(props, useStyling) {
    var text = props.text, secondaryText = props.secondaryText, tertiaryText = props.tertiaryText, optionalText = props.optionalText, size = props.size, coinColor = props.coinColor, imageUrl = props.imageUrl, imageDescription = props.imageDescription, initials = props.initials, presence = props.presence, isOutOfOffice = props.isOutOfOffice, rootProps = __rest(props, ["text", "secondaryText", "tertiaryText", "optionalText", "size", "coinColor", "imageUrl", "imageDescription", "initials", "presence", "isOutOfOffice"]);
    var slotProps = foundation_settings_1.mergeSettings(useStyling(props), {
        root: __assign({}, rootProps),
        coin: { size: size, coinColor: coinColor, imageUrl: imageUrl, imageDescription: imageDescription, initials: initials, presence: presence, isOutOfOffice: isOutOfOffice },
    });
    return {
        slotProps: slotProps,
        state: {
            text: text,
            secondaryText: secondaryText,
            tertiaryText: tertiaryText,
            optionalText: optionalText,
        },
    };
}
var render = function (Slots, renderData) {
    if (!renderData.state) {
        return null;
    }
    var _a = renderData.state, text = _a.text, secondaryText = _a.secondaryText, tertiaryText = _a.tertiaryText, optionalText = _a.optionalText;
    return (foundation_composable_1.withSlots(Slots.root, null,
        foundation_composable_1.withSlots(Slots.coin, null),
        foundation_composable_1.withSlots(Slots.stack, null,
            !!text && foundation_composable_1.withSlots(Slots.text, null, text),
            !!secondaryText && foundation_composable_1.withSlots(Slots.secondary, null, secondaryText),
            !!tertiaryText && foundation_composable_1.withSlots(Slots.tertiary, null, tertiaryText),
            !!optionalText && foundation_composable_1.withSlots(Slots.optional, null, optionalText))));
};
exports.Persona = foundation_compose_1.compose({
    displayName: Persona_types_1.personaName,
    settings: Persona_settings_1.settings,
    render: render,
    usePrepareProps: usePrepareForProps,
    slots: {
        root: {
            slotType: react_native_1.View,
            filter: adapters_1.filterViewProps,
        },
        coin: persona_coin_1.PersonaCoin,
        stack: react_native_1.View,
        text: react_native_1.Text,
        secondary: react_native_1.Text,
        tertiary: react_native_1.Text,
        optional: react_native_1.Text,
    },
    styles: {
        root: [Persona_tokens_root_1.buildRootStyle],
        coin: [tokens_1.foregroundColorTokens, { source: 'coinBackgroundColor', target: 'backgroundColor' }, Persona_tokens_coin_1.buildCoinStyle],
        text: [Persona_tokens_texts_1.buildTextStyle],
        secondary: [Persona_tokens_texts_1.buildSecondaryStyle],
        tertiary: [Persona_tokens_texts_1.buildTertiaryStyle],
        optional: [Persona_tokens_texts_1.buildOptionalStyle],
        stack: [Persona_tokens_stack_1.buildStackStyle],
    },
});
//# sourceMappingURL=Persona.js.map