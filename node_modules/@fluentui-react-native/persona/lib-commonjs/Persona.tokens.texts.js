"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var foundation_tokens_1 = require("@uifabricshared/foundation-tokens");
var Persona_helpers_1 = require("./Persona.helpers");
function buildTextStyleHelper(verticalGap, size, getFontAttributes, fontTokens, theme) {
    var textStyle = {};
    if (verticalGap !== undefined) {
        textStyle.marginBottom = verticalGap;
    }
    var _a = fontTokens || getFontAttributes(size || 'size40'), fontFamily = _a.fontFamily, fontSize = _a.fontSize, fontWeight = _a.fontWeight;
    textStyle.fontFamily = fontFamily && (theme.typography.families[fontFamily] || fontFamily);
    textStyle.fontSize = fontSize && (typeof fontSize === 'string' ? theme.typography.sizes[fontSize] : fontSize);
    textStyle.fontWeight = fontWeight && (theme.typography.weights[fontWeight] || fontWeight);
    if (textStyle.fontSize === 0) {
        textStyle.display = 'none';
        textStyle.fontSize = undefined;
    }
    return textStyle;
}
function _buildTextStyle(tokenProps, theme) {
    var verticalGap = tokenProps.verticalGap, textFont = tokenProps.textFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(verticalGap, size, Persona_helpers_1.getTextFont, textFont, theme) };
}
function _buildSecondaryStyle(tokenProps, theme) {
    var verticalGap = tokenProps.verticalGap, secondaryFont = tokenProps.secondaryFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(verticalGap, size, Persona_helpers_1.getSecondaryFont, secondaryFont, theme) };
}
function _buildTertiaryStyle(tokenProps, theme) {
    var verticalGap = tokenProps.verticalGap, tertiaryFont = tokenProps.tertiaryFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(verticalGap, size, Persona_helpers_1.getTertiaryFont, tertiaryFont, theme) };
}
function _buildOptionalStyle(tokenProps, theme) {
    var optionalFont = tokenProps.optionalFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(undefined, size, Persona_helpers_1.getOptionalFont, optionalFont, theme) };
}
exports.buildTextStyle = foundation_tokens_1.styleFunction(_buildTextStyle, ['size', 'textFont', 'verticalGap']);
exports.buildSecondaryStyle = foundation_tokens_1.styleFunction(_buildSecondaryStyle, [
    'size',
    'secondaryFont',
    'verticalGap',
]);
exports.buildTertiaryStyle = foundation_tokens_1.styleFunction(_buildTertiaryStyle, [
    'size',
    'tertiaryFont',
    'verticalGap',
]);
exports.buildOptionalStyle = foundation_tokens_1.styleFunction(_buildOptionalStyle, ['size', 'optionalFont']);
//# sourceMappingURL=Persona.tokens.texts.js.map