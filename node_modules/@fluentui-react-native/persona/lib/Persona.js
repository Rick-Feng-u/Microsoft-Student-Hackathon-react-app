var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx withSlots */
import { compose } from '@uifabricshared/foundation-compose';
import { personaName } from './Persona.types';
import { settings } from './Persona.settings';
import { View, Text } from 'react-native';
import { filterViewProps } from '@fluentui-react-native/adapters';
import { PersonaCoin } from '@fluentui-react-native/persona-coin';
import { withSlots } from '@uifabricshared/foundation-composable';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { buildRootStyle } from './Persona.tokens.root';
import { buildTextStyle, buildTertiaryStyle, buildOptionalStyle, buildSecondaryStyle } from './Persona.tokens.texts';
import { buildCoinStyle } from './Persona.tokens.coin';
import { foregroundColorTokens } from '@fluentui-react-native/tokens';
import { buildStackStyle } from './Persona.tokens.stack';
function usePrepareForProps(props, useStyling) {
    var text = props.text, secondaryText = props.secondaryText, tertiaryText = props.tertiaryText, optionalText = props.optionalText, size = props.size, coinColor = props.coinColor, imageUrl = props.imageUrl, imageDescription = props.imageDescription, initials = props.initials, presence = props.presence, isOutOfOffice = props.isOutOfOffice, rootProps = __rest(props, ["text", "secondaryText", "tertiaryText", "optionalText", "size", "coinColor", "imageUrl", "imageDescription", "initials", "presence", "isOutOfOffice"]);
    var slotProps = mergeSettings(useStyling(props), {
        root: __assign({}, rootProps),
        coin: { size: size, coinColor: coinColor, imageUrl: imageUrl, imageDescription: imageDescription, initials: initials, presence: presence, isOutOfOffice: isOutOfOffice },
    });
    return {
        slotProps: slotProps,
        state: {
            text: text,
            secondaryText: secondaryText,
            tertiaryText: tertiaryText,
            optionalText: optionalText,
        },
    };
}
var render = function (Slots, renderData) {
    if (!renderData.state) {
        return null;
    }
    var _a = renderData.state, text = _a.text, secondaryText = _a.secondaryText, tertiaryText = _a.tertiaryText, optionalText = _a.optionalText;
    return (withSlots(Slots.root, null,
        withSlots(Slots.coin, null),
        withSlots(Slots.stack, null,
            !!text && withSlots(Slots.text, null, text),
            !!secondaryText && withSlots(Slots.secondary, null, secondaryText),
            !!tertiaryText && withSlots(Slots.tertiary, null, tertiaryText),
            !!optionalText && withSlots(Slots.optional, null, optionalText))));
};
export var Persona = compose({
    displayName: personaName,
    settings: settings,
    render: render,
    usePrepareProps: usePrepareForProps,
    slots: {
        root: {
            slotType: View,
            filter: filterViewProps,
        },
        coin: PersonaCoin,
        stack: View,
        text: Text,
        secondary: Text,
        tertiary: Text,
        optional: Text,
    },
    styles: {
        root: [buildRootStyle],
        coin: [foregroundColorTokens, { source: 'coinBackgroundColor', target: 'backgroundColor' }, buildCoinStyle],
        text: [buildTextStyle],
        secondary: [buildSecondaryStyle],
        tertiary: [buildTertiaryStyle],
        optional: [buildOptionalStyle],
        stack: [buildStackStyle],
    },
});
//# sourceMappingURL=Persona.js.map