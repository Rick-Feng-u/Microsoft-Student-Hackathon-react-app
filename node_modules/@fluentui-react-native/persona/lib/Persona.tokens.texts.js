import { styleFunction } from '@uifabricshared/foundation-tokens';
import { getTextFont, getSecondaryFont, getTertiaryFont, getOptionalFont } from './Persona.helpers';
function buildTextStyleHelper(verticalGap, size, getFontAttributes, fontTokens, theme) {
    var textStyle = {};
    if (verticalGap !== undefined) {
        textStyle.marginBottom = verticalGap;
    }
    var _a = fontTokens || getFontAttributes(size || 'size40'), fontFamily = _a.fontFamily, fontSize = _a.fontSize, fontWeight = _a.fontWeight;
    textStyle.fontFamily = fontFamily && (theme.typography.families[fontFamily] || fontFamily);
    textStyle.fontSize = fontSize && (typeof fontSize === 'string' ? theme.typography.sizes[fontSize] : fontSize);
    textStyle.fontWeight = fontWeight && (theme.typography.weights[fontWeight] || fontWeight);
    if (textStyle.fontSize === 0) {
        textStyle.display = 'none';
        textStyle.fontSize = undefined;
    }
    return textStyle;
}
function _buildTextStyle(tokenProps, theme) {
    var verticalGap = tokenProps.verticalGap, textFont = tokenProps.textFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(verticalGap, size, getTextFont, textFont, theme) };
}
function _buildSecondaryStyle(tokenProps, theme) {
    var verticalGap = tokenProps.verticalGap, secondaryFont = tokenProps.secondaryFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(verticalGap, size, getSecondaryFont, secondaryFont, theme) };
}
function _buildTertiaryStyle(tokenProps, theme) {
    var verticalGap = tokenProps.verticalGap, tertiaryFont = tokenProps.tertiaryFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(verticalGap, size, getTertiaryFont, tertiaryFont, theme) };
}
function _buildOptionalStyle(tokenProps, theme) {
    var optionalFont = tokenProps.optionalFont, size = tokenProps.size;
    return { style: buildTextStyleHelper(undefined, size, getOptionalFont, optionalFont, theme) };
}
export var buildTextStyle = styleFunction(_buildTextStyle, ['size', 'textFont', 'verticalGap']);
export var buildSecondaryStyle = styleFunction(_buildSecondaryStyle, [
    'size',
    'secondaryFont',
    'verticalGap',
]);
export var buildTertiaryStyle = styleFunction(_buildTertiaryStyle, [
    'size',
    'tertiaryFont',
    'verticalGap',
]);
export var buildOptionalStyle = styleFunction(_buildOptionalStyle, ['size', 'optionalFont']);
//# sourceMappingURL=Persona.tokens.texts.js.map