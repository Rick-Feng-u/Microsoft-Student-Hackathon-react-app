"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var React = __importStar(require("react"));
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var component_cache_1 = require("@fluentui-react-native/component-cache");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
var RadioGroup_1 = require("./RadioGroup");
var RadioButton_types_1 = require("./RadioButton.types");
var NativeRadioButtonView = component_cache_1.ensureNativeComponent('FRNRadioButtonView');
exports.RadioButton = foundation_compose_1.compose({
    displayName: RadioButton_types_1.radioButtonName,
    usePrepareProps: function (userProps, useStyling) {
        var defaultComponentRef = React.useRef(null);
        var content = userProps.content, buttonKey = userProps.buttonKey, disabled = userProps.disabled, _a = userProps.componentRef, componentRef = _a === void 0 ? defaultComponentRef : _a;
        var info = React.useContext(RadioGroup_1.RadioGroupContext);
        // Reroute the native component's onPress event to RadioGroup's onChange
        var onPressRerouted = function () {
            // Prevent calls to RadioGroup's onChange on the currently selected button
            if (buttonKey != info.selectedKey) {
                info.onChange && info.onChange(buttonKey);
                info.updateSelectedButtonRef && componentRef && info.updateSelectedButtonRef(componentRef);
            }
        };
        /* We use the componentRef of the currently selected button to maintain the default tabbable
        element in a RadioGroup. Since the componentRef isn't generated until after initial render,
        we must update it once here. */
        React.useEffect(function () {
            if (buttonKey === info.selectedKey) {
                info.updateSelectedButtonRef && componentRef && info.updateSelectedButtonRef(componentRef);
            }
        }, []);
        var styleProps = useStyling(userProps);
        var isSelected = info.selectedKey === buttonKey;
        var slotProps = foundation_settings_1.mergeSettings(styleProps, {
            root: {
                ref: componentRef,
                buttonKey: buttonKey,
                content: content,
                disabled: disabled,
                onPress: onPressRerouted,
                selected: isSelected,
                style: {
                    // Fluent controls are designed to snap to a 4 px grid
                    marginLeft: 4,
                    marginTop: 4,
                    minWidth: 20,
                    minHeight: 20,
                },
            },
        });
        return { slotProps: slotProps };
    },
    slots: {
        root: NativeRadioButtonView,
    },
    styles: {
        root: [],
    },
    render: function (Slots) {
        return foundation_composable_1.withSlots(Slots.root, null);
    },
});
exports.default = exports.RadioButton;
//# sourceMappingURL=RadioButton.macos.js.map