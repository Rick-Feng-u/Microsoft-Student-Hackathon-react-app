"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var React = __importStar(require("react"));
var react_native_1 = require("react-native");
var text_1 = require("@fluentui-react-native/text");
var focus_zone_1 = require("@fluentui-react-native/focus-zone");
var RadioGroup_types_1 = require("./RadioGroup.types");
var foundation_compose_1 = require("@uifabricshared/foundation-compose");
var foundation_composable_1 = require("@uifabricshared/foundation-composable");
var RadioGroup_settings_1 = require("./RadioGroup.settings");
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var tokens_1 = require("@fluentui-react-native/tokens");
var interactive_hooks_1 = require("@fluentui-react-native/interactive-hooks");
exports.RadioGroupContext = React.createContext({
    selectedKey: null,
    onChange: function ( /* key: string */) {
        return;
    },
    updateSelectedButtonRef: function ( /* ref: React.RefObject<any>*/) {
        return;
    },
    buttonKeys: [],
});
exports.RadioGroup = foundation_compose_1.compose({
    displayName: RadioGroup_types_1.radioGroupName,
    usePrepareProps: function (userProps, useStyling) {
        var _a;
        var label = userProps.label, ariaLabel = userProps.ariaLabel, accessibilityLabel = userProps.accessibilityLabel, selectedKey = userProps.selectedKey, defaultSelectedKey = userProps.defaultSelectedKey, rest = __rest(userProps, ["label", "ariaLabel", "accessibilityLabel", "selectedKey", "defaultSelectedKey"]);
        // This hook updates the Selected Button and calls the customer's onClick function. This gets called after a button is pressed.
        var data = interactive_hooks_1.useSelectedKey(selectedKey || defaultSelectedKey || null, userProps.onChange);
        var _b = React.useState(React.useRef(null)), selectedButtonRef = _b[0], setSelectedButtonRef = _b[1];
        var onSelectButtonRef = React.useCallback(function (ref) {
            setSelectedButtonRef(ref);
        }, [setSelectedButtonRef]);
        var state = {
            context: {
                selectedKey: selectedKey !== null && selectedKey !== void 0 ? selectedKey : data.selectedKey,
                onChange: data.onKeySelect,
                updateSelectedButtonRef: onSelectButtonRef,
            },
        };
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var slotProps = foundation_settings_1.mergeSettings(styleProps, {
            root: __assign({ accessibilityLabel: (_a = accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : ariaLabel) !== null && _a !== void 0 ? _a : label, accessibilityRole: 'radiogroup' }, rest),
            label: { children: label },
            container: { isCircularNavigation: true, defaultTabbableElement: selectedButtonRef },
        });
        return { slotProps: slotProps, state: state };
    },
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        if (renderData.state == undefined) {
            return null;
        }
        // Populate the buttonKeys array
        if (children) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore - TODO, fix typing error
            renderData.state.context.buttonKeys = React.Children.map(children, function (child) {
                if (React.isValidElement(child)) {
                    return child.props.buttonKey;
                }
            });
        }
        return (foundation_composable_1.withSlots(exports.RadioGroupContext.Provider
        // Passes in the selected key and a hook function to update the newly selected button and call the client's onChange callback
        , { 
            // Passes in the selected key and a hook function to update the newly selected button and call the client's onChange callback
            value: renderData.state.context },
            foundation_composable_1.withSlots(Slots.root, null,
                foundation_composable_1.withSlots(Slots.label, null),
                foundation_composable_1.withSlots(Slots.container, null, children))));
    },
    settings: RadioGroup_settings_1.settings,
    slots: {
        root: react_native_1.View,
        label: text_1.Text,
        container: focus_zone_1.FocusZone,
    },
    styles: {
        root: [],
        label: [tokens_1.foregroundColorTokens, tokens_1.textTokens],
        container: [],
    },
});
exports.default = exports.RadioGroup;
//# sourceMappingURL=RadioGroup.js.map