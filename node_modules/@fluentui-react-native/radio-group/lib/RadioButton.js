/** @jsx withSlots */
'use strict';
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { View } from 'react-native';
import { Text } from '@fluentui-react-native/text';
import { radioButtonName } from './RadioButton.types';
import { compose } from '@uifabricshared/foundation-compose';
import { filterViewProps } from '@fluentui-react-native/adapters';
import { withSlots } from '@uifabricshared/foundation-composable';
import { settings, radioButtonSelectActionLabel } from './RadioButton.settings';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { foregroundColorTokens, textTokens, borderTokens, backgroundColorTokens, getPaletteFromTheme } from '@fluentui-react-native/tokens';
import { useAsPressable, useOnPressWithFocus, useViewCommandFocus } from '@fluentui-react-native/interactive-hooks';
import { RadioGroupContext } from './RadioGroup';
export var RadioButton = compose({
    displayName: radioButtonName,
    usePrepareProps: function (userProps, useStyling) {
        var _a, _b, _c;
        var defaultComponentRef = React.useRef(null);
        var content = userProps.content, buttonKey = userProps.buttonKey, disabled = userProps.disabled, accessibilityLabel = userProps.accessibilityLabel, ariaLabel = userProps.ariaLabel, _d = userProps.componentRef, componentRef = _d === void 0 ? defaultComponentRef : _d, accessibilityPositionInSet = userProps.accessibilityPositionInSet, ariaPosInSet = userProps.ariaPosInSet, accessibilitySetSize = userProps.accessibilitySetSize, ariaSetSize = userProps.ariaSetSize, rest = __rest(userProps, ["content", "buttonKey", "disabled", "accessibilityLabel", "ariaLabel", "componentRef", "accessibilityPositionInSet", "ariaPosInSet", "accessibilitySetSize", "ariaSetSize"]);
        // Grabs the context information from RadioGroup (currently selected button and client's onChange callback)
        var info = React.useContext(RadioGroupContext);
        var buttonRef = useViewCommandFocus(componentRef);
        /* We don't want to call the user's onChange multiple times on the same selection. */
        var changeSelection = function () {
            if (buttonKey != info.selectedKey) {
                info.onChange && info.onChange(buttonKey);
                info.updateSelectedButtonRef && componentRef && info.updateSelectedButtonRef(componentRef);
            }
        };
        /* We use the componentRef of the currently selected button to maintain the default tabbable
        element in a RadioGroup. Since the componentRef isn't generated until after initial render,
        we must update it once here. */
        React.useEffect(function () {
            if (buttonKey == info.selectedKey) {
                info.updateSelectedButtonRef && componentRef && info.updateSelectedButtonRef(componentRef);
            }
        }, []);
        // Ensure focus is placed on button after click
        var changeSelectionWithFocus = useOnPressWithFocus(componentRef, changeSelection);
        /* RadioButton changes selection when focus is moved between each RadioButton and on a click */
        var pressable = useAsPressable(__assign(__assign({}, rest), { onPress: changeSelectionWithFocus, onFocus: changeSelection }));
        // Used when creating accessibility properties in mergeSettings below
        var onAccessibilityAction = React.useCallback(function (event) {
            switch (event.nativeEvent.actionName) {
                case 'Select':
                    changeSelection();
                    break;
            }
        }, [info, buttonKey]);
        var state = __assign(__assign({}, pressable.state), { selected: info.selectedKey === userProps.buttonKey, disabled: disabled || false });
        // Grab the styling information from the userProps, referencing the state as well as the props.
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var slotProps = mergeSettings(styleProps, {
            root: __assign(__assign(__assign(__assign({}, rest), { ref: buttonRef }), pressable.props), { accessibilityRole: 'radio', accessibilityLabel: (_a = accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : ariaLabel) !== null && _a !== void 0 ? _a : content, accessibilityState: { disabled: state.disabled, selected: state.selected }, accessibilityActions: [{ name: 'Select', label: radioButtonSelectActionLabel }], accessibilityPositionInSet: (_b = accessibilityPositionInSet !== null && accessibilityPositionInSet !== void 0 ? accessibilityPositionInSet : ariaPosInSet) !== null && _b !== void 0 ? _b : info.buttonKeys.findIndex(function (x) { return x == buttonKey; }) + 1, accessibilitySetSize: (_c = accessibilitySetSize !== null && accessibilitySetSize !== void 0 ? accessibilitySetSize : ariaSetSize) !== null && _c !== void 0 ? _c : info.buttonKeys.length, onAccessibilityAction: onAccessibilityAction }),
            content: { children: content },
        });
        return { slotProps: slotProps };
    },
    render: function (Slots, _renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        return (withSlots(Slots.root, null,
            withSlots(Slots.button, null,
                withSlots(Slots.innerCircle, null)),
            withSlots(Slots.content, null),
            children));
    },
    settings: settings,
    slots: {
        root: View,
        button: { slotType: View, filter: filterViewProps },
        innerCircle: { slotType: View, filter: filterViewProps },
        content: Text,
    },
    styles: {
        root: [],
        button: [borderTokens],
        innerCircle: [backgroundColorTokens],
        content: [foregroundColorTokens, textTokens, [{ source: 'textBorderColor', lookup: getPaletteFromTheme, target: 'borderColor' }]],
    },
});
export default RadioButton;
//# sourceMappingURL=RadioButton.js.map