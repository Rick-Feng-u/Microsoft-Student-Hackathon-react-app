/** @jsx withSlots */
import * as React from 'react';
import { compose } from '@uifabricshared/foundation-compose';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { ensureNativeComponent } from '@fluentui-react-native/component-cache';
import { withSlots } from '@uifabricshared/foundation-composable';
import { RadioGroupContext } from './RadioGroup';
import { radioButtonName } from './RadioButton.types';
var NativeRadioButtonView = ensureNativeComponent('FRNRadioButtonView');
export var RadioButton = compose({
    displayName: radioButtonName,
    usePrepareProps: function (userProps, useStyling) {
        var defaultComponentRef = React.useRef(null);
        var content = userProps.content, buttonKey = userProps.buttonKey, disabled = userProps.disabled, _a = userProps.componentRef, componentRef = _a === void 0 ? defaultComponentRef : _a;
        var info = React.useContext(RadioGroupContext);
        // Reroute the native component's onPress event to RadioGroup's onChange
        var onPressRerouted = function () {
            // Prevent calls to RadioGroup's onChange on the currently selected button
            if (buttonKey != info.selectedKey) {
                info.onChange && info.onChange(buttonKey);
                info.updateSelectedButtonRef && componentRef && info.updateSelectedButtonRef(componentRef);
            }
        };
        /* We use the componentRef of the currently selected button to maintain the default tabbable
        element in a RadioGroup. Since the componentRef isn't generated until after initial render,
        we must update it once here. */
        React.useEffect(function () {
            if (buttonKey === info.selectedKey) {
                info.updateSelectedButtonRef && componentRef && info.updateSelectedButtonRef(componentRef);
            }
        }, []);
        var styleProps = useStyling(userProps);
        var isSelected = info.selectedKey === buttonKey;
        var slotProps = mergeSettings(styleProps, {
            root: {
                ref: componentRef,
                buttonKey: buttonKey,
                content: content,
                disabled: disabled,
                onPress: onPressRerouted,
                selected: isSelected,
                style: {
                    // Fluent controls are designed to snap to a 4 px grid
                    marginLeft: 4,
                    marginTop: 4,
                    minWidth: 20,
                    minHeight: 20,
                },
            },
        });
        return { slotProps: slotProps };
    },
    slots: {
        root: NativeRadioButtonView,
    },
    styles: {
        root: [],
    },
    render: function (Slots) {
        return withSlots(Slots.root, null);
    },
});
export default RadioButton;
//# sourceMappingURL=RadioButton.macos.js.map