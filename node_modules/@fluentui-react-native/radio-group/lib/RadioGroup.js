var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx withSlots */
import * as React from 'react';
import { View } from 'react-native';
import { Text } from '@fluentui-react-native/text';
import { FocusZone } from '@fluentui-react-native/focus-zone';
import { radioGroupName, } from './RadioGroup.types';
import { compose } from '@uifabricshared/foundation-compose';
import { withSlots } from '@uifabricshared/foundation-composable';
import { settings } from './RadioGroup.settings';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { foregroundColorTokens, textTokens } from '@fluentui-react-native/tokens';
import { useSelectedKey } from '@fluentui-react-native/interactive-hooks';
export var RadioGroupContext = React.createContext({
    selectedKey: null,
    onChange: function ( /* key: string */) {
        return;
    },
    updateSelectedButtonRef: function ( /* ref: React.RefObject<any>*/) {
        return;
    },
    buttonKeys: [],
});
export var RadioGroup = compose({
    displayName: radioGroupName,
    usePrepareProps: function (userProps, useStyling) {
        var _a;
        var label = userProps.label, ariaLabel = userProps.ariaLabel, accessibilityLabel = userProps.accessibilityLabel, selectedKey = userProps.selectedKey, defaultSelectedKey = userProps.defaultSelectedKey, rest = __rest(userProps, ["label", "ariaLabel", "accessibilityLabel", "selectedKey", "defaultSelectedKey"]);
        // This hook updates the Selected Button and calls the customer's onClick function. This gets called after a button is pressed.
        var data = useSelectedKey(selectedKey || defaultSelectedKey || null, userProps.onChange);
        var _b = React.useState(React.useRef(null)), selectedButtonRef = _b[0], setSelectedButtonRef = _b[1];
        var onSelectButtonRef = React.useCallback(function (ref) {
            setSelectedButtonRef(ref);
        }, [setSelectedButtonRef]);
        var state = {
            context: {
                selectedKey: selectedKey !== null && selectedKey !== void 0 ? selectedKey : data.selectedKey,
                onChange: data.onKeySelect,
                updateSelectedButtonRef: onSelectButtonRef,
            },
        };
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var slotProps = mergeSettings(styleProps, {
            root: __assign({ accessibilityLabel: (_a = accessibilityLabel !== null && accessibilityLabel !== void 0 ? accessibilityLabel : ariaLabel) !== null && _a !== void 0 ? _a : label, accessibilityRole: 'radiogroup' }, rest),
            label: { children: label },
            container: { isCircularNavigation: true, defaultTabbableElement: selectedButtonRef },
        });
        return { slotProps: slotProps, state: state };
    },
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        if (renderData.state == undefined) {
            return null;
        }
        // Populate the buttonKeys array
        if (children) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore - TODO, fix typing error
            renderData.state.context.buttonKeys = React.Children.map(children, function (child) {
                if (React.isValidElement(child)) {
                    return child.props.buttonKey;
                }
            });
        }
        return (withSlots(RadioGroupContext.Provider
        // Passes in the selected key and a hook function to update the newly selected button and call the client's onChange callback
        , { 
            // Passes in the selected key and a hook function to update the newly selected button and call the client's onChange callback
            value: renderData.state.context },
            withSlots(Slots.root, null,
                withSlots(Slots.label, null),
                withSlots(Slots.container, null, children))));
    },
    settings: settings,
    slots: {
        root: View,
        label: Text,
        container: FocusZone,
    },
    styles: {
        root: [],
        label: [foregroundColorTokens, textTokens],
        container: [],
    },
});
export default RadioGroup;
//# sourceMappingURL=RadioGroup.js.map