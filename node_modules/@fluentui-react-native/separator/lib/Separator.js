var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** @jsx withSlots */
import { View } from 'react-native';
import { compose, buildProps, withSlots, mergeProps } from '@fluentui-react-native/framework';
export var separatorName = 'Separator';
var propMask = { vertical: undefined };
export var Separator = compose({
    displayName: separatorName,
    tokens: [{ separatorWidth: 1 }, separatorName],
    tokensThatAreAlsoProps: ['vertical'],
    slotProps: {
        root: buildProps(function (tokens) { return ({
            style: __assign(__assign({}, (tokens.vertical ? { borderLeftWidth: tokens.separatorWidth } : { borderTopWidth: tokens.separatorWidth })), (tokens.color && { borderColor: tokens.color })),
        }); }, ['color', 'vertical', 'separatorWidth']),
    },
    slots: { root: View },
    render: function (props, useSlots) {
        var Root = useSlots(props).root;
        return function (rest, children) { return withSlots(Root, __assign({}, mergeProps(props, rest, propMask)), children); };
    },
});
export default Separator;
//# sourceMappingURL=Separator.js.map