var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx withSlots */
import * as React from 'react';
import { View } from 'react-native';
import { Text } from '@fluentui-react-native/text';
import { tabsName } from './Tabs.types';
import { compose } from '@uifabricshared/foundation-compose';
import { withSlots } from '@uifabricshared/foundation-composable';
import { settings } from './Tabs.settings';
import { mergeSettings } from '@uifabricshared/foundation-settings';
import { filterViewProps } from '@fluentui-react-native/adapters';
import { foregroundColorTokens, textTokens, backgroundColorTokens } from '@fluentui-react-native/tokens';
import { useSelectedKey, useAsPressable } from '@fluentui-react-native/interactive-hooks';
export var TabsContext = React.createContext({
    selectedKey: null,
    onTabsClick: function ( /* key: string */) {
        return;
    },
    getTabId: function ( /* key:string, index: number*/) {
        return null;
    },
    updateSelectedTabsItemRef: function ( /* ref: React.RefObject<any>*/) {
        return;
    },
    tabsItemKeys: [],
    views: null,
    focusZoneRef: null,
});
export var Tabs = compose({
    displayName: tabsName,
    usePrepareProps: function (userProps, useStyling) {
        var focusZoneRef = React.useRef(null);
        var defaultComponentRef = React.useRef(null);
        var label = userProps.label, _a = userProps.accessibilityLabel, accessibilityLabel = _a === void 0 ? userProps.label : _a, selectedKey = userProps.selectedKey, headersOnly = userProps.headersOnly, defaultSelectedKey = userProps.defaultSelectedKey, getTabId = userProps.getTabId, _b = userProps.componentRef, componentRef = _b === void 0 ? defaultComponentRef : _b, isCircularNavigation = userProps.isCircularNavigation, rest = __rest(userProps, ["label", "accessibilityLabel", "selectedKey", "headersOnly", "defaultSelectedKey", "getTabId", "componentRef", "isCircularNavigation"]);
        // This hook updates the Selected TabsItem and calls the customer's onTabsClick function. This gets called after a TabsItem is pressed.
        var data = useSelectedKey(selectedKey || defaultSelectedKey || null, userProps.onTabsClick);
        var findTabId = React.useCallback(function (key, index) {
            if (getTabId) {
                return getTabId(key, index);
            }
            return key + "-Tab" + index;
        }, [getTabId]);
        // Stores views to be displayed
        var map = new Map();
        var state = {
            context: {
                selectedKey: selectedKey !== null && selectedKey !== void 0 ? selectedKey : data.selectedKey,
                onTabsClick: data.onKeySelect,
                getTabId: findTabId,
                views: map,
                focusZoneRef: focusZoneRef,
            },
            info: {
                headersOnly: headersOnly !== null && headersOnly !== void 0 ? headersOnly : false,
                label: !!label,
            },
        };
        var styleProps = useStyling(userProps, function (override) { return state[override] || userProps[override]; });
        var pressable = useAsPressable(__assign({}, rest));
        var onKeyDown = function (ev) {
            if (ev.nativeEvent.key === 'ArrowRight' || ev.nativeEvent.key === 'ArrowLeft') {
                var length_1 = state.info.enabledKeys.length;
                var currTabItemIndex = state.info.enabledKeys.findIndex(function (x) { return x == state.context.selectedKey; });
                var newCurrTabItemIndex = void 0;
                if (ev.nativeEvent.key === 'ArrowRight') {
                    if (isCircularNavigation || !(currTabItemIndex + 1 == length_1)) {
                        newCurrTabItemIndex = (currTabItemIndex + 1) % length_1;
                        state.context.selectedKey = state.info.enabledKeys[newCurrTabItemIndex];
                        data.onKeySelect(state.context.selectedKey);
                    }
                }
                else {
                    if (isCircularNavigation || !(currTabItemIndex == 0)) {
                        newCurrTabItemIndex = (currTabItemIndex - 1 + length_1) % length_1;
                        state.context.selectedKey = state.info.enabledKeys[newCurrTabItemIndex];
                        data.onKeySelect(state.context.selectedKey);
                    }
                }
            }
        };
        /* GH #964, Extra props are needed because FocusZone is not implemented on windows.
        The ref focusZoneRef is used to set focus on Tabs when selecting a TabsItem and onKeyDown manages keyboarding */
        var slotProps = mergeSettings(styleProps, {
            root: __assign(__assign({ ref: componentRef, accessibilityLabel: accessibilityLabel, accessibilityRole: 'tablist' }, pressable.props), rest),
            label: { children: label },
            stack: { focusable: true, ref: focusZoneRef, onKeyDown: onKeyDown },
        });
        return { slotProps: slotProps, state: state };
    },
    render: function (Slots, renderData) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var _a, _b, _c, _d;
        if (!renderData.state) {
            return null;
        }
        // Populate the tabsItemKeys array
        if (children) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore - TODO, fix typing error
            renderData.state.context.tabsItemKeys = React.Children.map(children, function (child) {
                if (React.isValidElement(child)) {
                    return child.props.itemKey;
                }
            });
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore - TODO, fix typing error
            renderData.state.info.enabledKeys = React.Children.map(children, function (child) {
                if (React.isValidElement(child)) {
                    if (!child.props.disabled) {
                        return child.props.itemKey;
                    }
                }
            });
            /* Sets the default selected TabsItem if a TabsItem is hidden.
            The default selected Tabsitem is the first enabled TabsItem. */
            if (!renderData.state.info.enabledKeys.includes(renderData.state.context.selectedKey)) {
                renderData.state.context.selectedKey = (_a = renderData.state.info.enabledKeys[0]) !== null && _a !== void 0 ? _a : null;
            }
        }
        return (withSlots(TabsContext.Provider
        // Passes in the selected key and a hook function to update the newly selected tabsItem and call the client's onTabsClick callback
        , { 
            // Passes in the selected key and a hook function to update the newly selected tabsItem and call the client's onTabsClick callback
            value: (_b = renderData.state) === null || _b === void 0 ? void 0 : _b.context },
            withSlots(Slots.root, null,
                ((_d = (_c = renderData.state) === null || _c === void 0 ? void 0 : _c.info) === null || _d === void 0 ? void 0 : _d.label) && withSlots(Slots.label, null),
                withSlots(Slots.stack, null, children),
                withSlots(Slots.tabPanel, null,
                    withSlots(TabsContext.Consumer, null, function (context) { return !renderData.state.info.headersOnly && context.views.get(context.selectedKey); })))));
    },
    settings: settings,
    slots: {
        root: View,
        label: Text,
        stack: View,
        tabPanel: { slotType: View, filter: filterViewProps },
    },
    styles: {
        root: [],
        label: [foregroundColorTokens, textTokens],
        stack: [backgroundColorTokens],
    },
});
export default Tabs;
//# sourceMappingURL=Tabs.windows.js.map