import { ThemeColorDefinition } from './Color.types';
import { OfficePalette } from './palette.types';
import { Typography, PartialTypography } from './Typography.types';
import { ColorValue } from 'react-native';
declare type TwoLevelPartial<T> = {
    [K in keyof T]?: Partial<T[K]>;
};
export interface Spacing {
    s2: string;
    s1: string;
    m: string;
    l1: string;
    l2: string;
}
/**
 * A fully specified theme.
 */
export interface Theme {
    name?: string;
    colors: ThemeColorDefinition;
    typography: Typography;
    components: {
        [key: string]: object;
    };
    spacing: Spacing;
    host: {
        appearance: AppearanceOptions | 'dynamic';
        palette?: OfficePalette;
        colors?: {
            [key: string]: ColorValue;
        };
    };
}
/**
 * Generally a partial theme is comprised of partial versions of the objects within the theme, with the exception of typography
 * which has additional levels of hierarchy
 */
export declare type PartialTheme = Omit<TwoLevelPartial<Theme>, 'typography' | 'host'> & {
    typography?: PartialTypography;
    host?: TwoLevelPartial<Theme['host']>;
};
export declare type AppearanceOptions = 'light' | 'dark' | 'highContrast';
export interface ThemeOptions {
    /**
     * Should the baseline colors be light, dark, or use the values from the Appearance API from react-native.
     */
    appearance?: AppearanceOptions | 'dynamic';
    /**
     * Default appearance should the library to request this from native not be available
     */
    defaultAppearance?: AppearanceOptions;
    /**
     * If in a host that supports multiple areas within the app that use different palettes, this specifies the palette name to
     * load.
     *
     * In Office this corresponds to regions like taskpanes, the ribbon, left navigation, and so on, but that concept could be extended
     * to any host that wants to support this.
     */
    paletteName?: string;
}
export {};
//# sourceMappingURL=Theme.types.d.ts.map