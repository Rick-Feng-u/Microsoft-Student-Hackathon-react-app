"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var themeReference_1 = require("./themeReference");
var test_tools_1 = require("@fluentui-react-native/test-tools");
var themeBase = test_tools_1.mockTheme;
describe('ThemeReference tests', function () {
    it('returns a flat wrapped theme', function () {
        var ref = new themeReference_1.ThemeReference(themeBase);
        expect(ref.theme).toEqual(themeBase);
    });
    it('creates a consistent new object', function () {
        var themeRef = new themeReference_1.ThemeReference(themeBase, { colors: { white: 'pink' } });
        expect(themeRef.theme).toBe(themeRef.theme);
        expect(themeRef.theme).not.toBe(themeBase);
    });
    it('performs a simple merge', function () {
        var themeRef = new themeReference_1.ThemeReference(themeBase, {
            colors: {
                white: 'pink',
            },
            spacing: { l2: '120px' },
        });
        expect(themeRef.theme.colors.white).toEqual('pink');
        expect(themeRef.theme.spacing.l2).toEqual('120px');
    });
    it('transforms via functions correctly', function () {
        var themeRef = new themeReference_1.ThemeReference(themeBase, function () { return ({
            colors: {
                white: 'blue',
            },
        }); });
        expect(themeRef.theme.colors.white).toEqual('blue');
    });
    it('handles multiple recipes for a single reference', function () {
        var themeRef = new themeReference_1.ThemeReference(themeBase, { colors: { white: 'black' } }, function () { return ({
            colors: { red: 'green' },
        }); });
        expect(themeRef.theme.colors.white).toEqual('black');
        expect(themeRef.theme.colors.red).toEqual('green');
    });
    it('sends updates correctly', function () {
        var themeRef = new themeReference_1.ThemeReference(themeBase);
        var signal = { count: 0 };
        var onChange = function () {
            signal.count++;
        };
        themeRef.addOnThemeChanged(onChange);
        expect(signal.count).toEqual(0);
        themeRef.invalidate();
        expect(signal.count).toEqual(1);
        themeRef.removeOnThemeChanged(onChange);
        themeRef.invalidate();
        expect(signal.count).toEqual(1);
    });
    it('chains correctly for definitions and updates', function () {
        var baseRef = new themeReference_1.ThemeReference(themeBase, { colors: { white: 'pink' } });
        var nextRef = new themeReference_1.ThemeReference(baseRef, { colors: { red: 'purple' } });
        var signal = { count: 0 };
        var onChange = function () {
            signal.count++;
        };
        nextRef.addOnThemeChanged(onChange);
        expect(nextRef.theme.colors.white).toEqual('pink');
        expect(nextRef.theme.colors.red).toEqual('purple');
        expect(signal.count).toEqual(0);
        baseRef.update({ colors: { white: 'blue' } });
        expect(signal.count).toEqual(1);
        expect(nextRef.theme.colors.white).toEqual('blue');
    });
});
//# sourceMappingURL=themeReference.test.js.map