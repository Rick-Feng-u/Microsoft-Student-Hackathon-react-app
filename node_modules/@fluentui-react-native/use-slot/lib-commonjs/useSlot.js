"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var merge_props_1 = require("@fluentui-react-native/merge-props");
/**
 *
 * @param slot - component which may or may not be built using the staged pattern
 * @returns - the staged function or undefined
 */
function getStagedRender(slot) {
    return (typeof slot === 'function' && slot._staged) || undefined;
}
/**
 * useSlot hook function, allows authoring against pluggable slots as well as allowing components to be called as functions rather than
 * via createElement if they support it.
 *
 * @param component - any kind of component that can be rendered as part of the tree
 * @param props - props, particularly the portion that includes styles, that should be passed to the component. These will be merged with what are specified in the JSX tree
 * @param filter - optional filter that will prune the props before forwarding to the component
 * @returns
 */
function useSlot(component, props, filter) {
    // extract the staged component function if that pattern is being used, will be undefined if it is a standard component
    var stagedComponent = getStagedRender(component);
    // build the secondary processing function and the result holder, done via useMemo so the function identity stays the same. Rebuilding the closure every time would invalidate render
    var _a = React.useMemo(function () {
        // create a holder object so values can be passed to the closure
        var resultHolder = {};
        // create a function that is in the right format for rendering in JSX/TSX, this has children split out
        var slotFn = function (extraProps) {
            var children = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                children[_i - 1] = arguments[_i];
            }
            var result = resultHolder.result;
            // result is either a function (if a staged component) or a set of props passed to useSlot (and sent here via resultHolder)
            var props = typeof result === 'function' ? extraProps : merge_props_1.mergeProps(result, extraProps);
            // if we have a filter specified, run it creating a prop collection of { [key]: undefined } which will end up deleting the values via mergeStyles
            var propsToRemove = filter ? Object.keys(props).filter(function (key) { return !filter(key); }) : undefined;
            if ((propsToRemove === null || propsToRemove === void 0 ? void 0 : propsToRemove.length) > 0) {
                props = merge_props_1.mergeProps(props, Object.assign.apply(Object, __spreadArrays([{}], propsToRemove.map(function (prop) {
                    var _a;
                    return (_a = {}, _a[prop] = undefined, _a);
                }))));
            }
            // now if result was a function then call it directly, if not go through the standard React.createElement process
            return typeof result === 'function' ? result.apply(void 0, __spreadArrays([props], children)) : React.createElement.apply(React, __spreadArrays([component, props], children));
        };
        // mark the slotFn so that withSlots knows to handle it differently
        slotFn._canCompose = true;
        return [slotFn, resultHolder];
    }, [component, filter]), fn = _a[0], results = _a[1];
    // if it is a staged component executre the first part with the props, otherwise just remember the props
    results.result = stagedComponent ? stagedComponent(props) : props;
    // return the function
    return fn;
}
exports.useSlot = useSlot;
//# sourceMappingURL=useSlot.js.map