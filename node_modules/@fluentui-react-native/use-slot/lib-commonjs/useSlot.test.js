"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** @jsx withSlots */
var react_native_1 = require("react-native");
var enzyme_to_json_1 = __importDefault(require("enzyme-to-json"));
var React = __importStar(require("react"));
var enzyme_1 = require("enzyme");
var useSlot_1 = require("./useSlot");
var withSlots_1 = require("./withSlots");
var merge_props_1 = require("@fluentui-react-native/merge-props");
var stagedComponent_1 = require("./stagedComponent");
/**
 * Text component that demonstrates pluggability, in this case via passing an alternative component type into a prop called inner.
 */
var PluggableText = stagedComponent_1.stagedComponent(function (props) {
    // start by splitting inner and children from the incoming props
    var inner = props.inner, rest = __rest(props, ["inner"]);
    // next call use slot with either inner or Text as the component type, and forwarding the props here. These props will be remembered
    // and don't need to be passed again in the JSX tree.
    var Inner = useSlot_1.useSlot(inner || react_native_1.Text, rest);
    // return a closure for finishing off render
    return function (extra, children) { return withSlots_1.withSlots(Inner, __assign({}, extra), children); };
});
PluggableText.displayName = 'PluggableText';
var useStyledStagedText = function (props, baseStyle, inner) {
    // split out any passed in style
    var style = props.style, rest = __rest(props, ["style"]);
    // create merged props to pass in to the inner slot
    var mergedProps = __assign(__assign(__assign({}, rest), { style: merge_props_1.mergeStyles(baseStyle, style) }), (inner && { inner: inner }));
    // create a slot based on the pluggable text
    var InnerText = useSlot_1.useSlot(PluggableText, mergedProps);
    // return a closure to complete the staged pattern
    return function (extra, children) { return withSlots_1.withSlots(InnerText, __assign({}, extra), children); };
};
var HeaderText = stagedComponent_1.stagedComponent(function (props) {
    // could be done outside but showing the pattern of using useMemo to avoid creating a new object on every execution
    var baseStyle = React.useMemo(function () { return ({ fontSize: 24, fontWeight: 'bold' }); }, []);
    // return a styled text component
    return useStyledStagedText(props, baseStyle);
});
var CaptionText = stagedComponent_1.stagedComponent(function (props) {
    // memo to not recreate style every time
    var baseStyle = React.useMemo(function () { return ({ fontFamily: 'Arial', fontWeight: '200' }); }, []);
    // return a styled text component
    return useStyledStagedText(props, baseStyle);
});
// Control authored as simple containment
var HeaderCaptionText1 = function (props) {
    var children = props.children, rest = __rest(props, ["children"]);
    var baseStyle = React.useMemo(function () { return ({ fontSize: 24, fontWeight: 'bold' }); }, []);
    var mergedProps = __assign(__assign({}, rest), { style: merge_props_1.mergeStyles(baseStyle, props.style) });
    var InnerText = useSlot_1.useSlot(CaptionText, mergedProps);
    return withSlots_1.withSlots(InnerText, null, children);
};
// Control authored by plugging the root
var HeaderCaptionText2 = function (props) { return HeaderText(__assign(__assign({}, props), { inner: CaptionText })); };
/**
 * this wrapper solves the (so-far) inexplicable type errors from the matchers in typescript
 */
function snapshotTestTree(tree) {
    expect(enzyme_to_json_1.default(tree)).toMatchSnapshot();
}
// some styles to use in tests
var styleWithColor = { color: 'blue' };
describe('useSlot tests', function () {
    /** first render the component with no updates */
    it('Two base text elements rendering, with and without styles', function () {
        var tree = enzyme_1.mount(withSlots_1.withSlots(react_native_1.View, null,
            withSlots_1.withSlots(PluggableText, null, "No Style"),
            withSlots_1.withSlots(PluggableText, { style: styleWithColor }, "With Style")));
        snapshotTestTree(tree);
    });
    it('Header and caption text render as expected', function () {
        var tree = enzyme_1.mount(withSlots_1.withSlots(react_native_1.View, null,
            withSlots_1.withSlots(HeaderText, null, "Header text"),
            withSlots_1.withSlots(CaptionText, null, "Caption text")));
        snapshotTestTree(tree);
    });
    it('Multi-level text elements are equivalent', function () {
        var tree1 = enzyme_1.mount(withSlots_1.withSlots(HeaderCaptionText1, null, "HeaderCaptionText"));
        snapshotTestTree(tree1);
        var tree2 = enzyme_1.mount(withSlots_1.withSlots(HeaderCaptionText2, null, "HeaderCaptionText"));
        snapshotTestTree(tree2);
        expect(enzyme_to_json_1.default(tree1['HeaderCaptionText1'])).toEqual(enzyme_to_json_1.default(tree2['HeaderCaptionText2']));
    });
});
//# sourceMappingURL=useSlot.test.js.map