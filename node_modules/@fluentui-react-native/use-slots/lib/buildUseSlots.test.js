var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** @jsx withSlots */
import { withSlots, stagedComponent } from '@fluentui-react-native/use-slot';
import * as renderer from 'react-test-renderer';
import { buildUseSlots } from './buildUseSlots';
import { View, Text } from 'react-native';
var useSlotsBase = buildUseSlots({
    slots: {
        outer: View,
        inner: View,
        content: Text,
    },
});
var CompBase = stagedComponent(function (props) {
    var Slots = useSlotsBase(props);
    return function (extra) {
        var merged = __assign(__assign({}, props), extra);
        return (withSlots(Slots.outer, __assign({}, merged),
            withSlots(Slots.inner, { style: { backgroundColor: 'blue', width: 20, height: 10 } },
                withSlots(Slots.content, null, "Hello"))));
    };
});
describe('buildUseSlots test suite', function () {
    it('Simple component render', function () {
        var tree = renderer.create(withSlots(CompBase, { style: { width: 30, height: 20, borderColor: 'green', borderWidth: 1 } })).toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=buildUseSlots.test.js.map