"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var memo_cache_1 = require("@fluentui-react-native/memo-cache");
var buildProps_1 = require("./buildProps");
var theme = { foo: 'foo', bar: 'bar' };
var instanceCount = 0;
function munge(tokens, theme, props) {
    return __assign(__assign(__assign(__assign({}, theme), tokens), props), { instance: instanceCount++ });
}
describe('props function tests', function () {
    test('basic build props function caches as expected', function () {
        var cache = memo_cache_1.getMemoCache();
        var styleFn = buildProps_1.buildProps(munge, ['a', 'b']);
        var p1 = styleFn({ a: 'a', b: 'b', c: 'c' }, theme, undefined, cache);
        expect(styleFn({ a: 'a', b: 'b', c: 'foo' }, theme, undefined, cache)).toBe(p1);
        var p2 = styleFn({ a: 'b', b: 'b' }, theme, undefined, cache);
        expect(p2).not.toBe(p1);
        expect(styleFn({ a: 'b', b: 'b', c: 'bar' }, theme, undefined, cache)).toBe(p2);
    });
    test('build props function refinement works with explicit keys', function () {
        var cache = memo_cache_1.getMemoCache();
        var styleFn = buildProps_1.buildProps(munge, ['a', 'b', 'c', 'd']);
        var refinedFn = styleFn.refine(['a', 'b']);
        var t1 = { a: 'a', b: 'b', c: 'c', d: 'd' };
        var t2 = { a: 'a', b: 'b', c: 'foo', d: 'bar' };
        var p1 = styleFn(t1, theme, undefined, cache);
        var p2 = styleFn(t2, theme, undefined, cache);
        expect(p2).not.toBe(p1);
        var rp1 = refinedFn(t1, theme, undefined, cache);
        var rp2 = refinedFn(t2, theme, undefined, cache);
        expect(rp2).toBe(rp1);
    });
    test('build props with outer props function caches as expected', function () {
        var cache = memo_cache_1.getMemoCache();
        var styleFn = buildProps_1.buildProps(munge, ['a', 'b', 'banana']);
        var p1 = styleFn({ a: 'a', b: 'b', c: 'c' }, theme, { banana: 'banana' }, cache);
        expect(styleFn({ a: 'a', b: 'b', c: 'foo' }, theme, { banana: 'banana', potato: 'potato' }, cache)).toBe(p1);
        var p2 = styleFn({ a: 'b', b: 'b' }, theme, { banana: 'potato' }, cache);
        expect(p2).not.toBe(p1);
        expect(styleFn({ a: 'b', b: 'b', c: 'bar' }, theme, { banana: 'potato', potato: 'potato' }, cache)).toBe(p2);
    });
});
//# sourceMappingURL=buildProps.test.js.map