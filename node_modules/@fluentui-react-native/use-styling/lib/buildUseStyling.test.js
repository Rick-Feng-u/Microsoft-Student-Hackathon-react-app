var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { buildUseStyling } from './buildUseStyling';
import { getMemoCache } from '@fluentui-react-native/memo-cache';
import { buildProps } from './buildProps';
var lastInstance = 0;
var baseTokens = {
    a: 'a-base',
    b: 'b-base',
    c: 'c-base',
    hover: {
        c: 'c-base-hover',
    },
    press: {
        c: 'c-base-press',
    },
};
var defaultTheme = {
    vals: {
        foo: 'foo',
        bar: 'bar',
    },
    components: {
        uno: {
            a: 'uno-a',
            c: 'uno-c',
        },
        dos: {
            b: 'dos-b',
            c: 'dos-c',
        },
    },
};
var themeHelper = {
    useTheme: function () { return defaultTheme; },
    getComponentInfo: function (theme, name) { return theme.components[name]; },
};
var slotFn1 = function (tokens, theme) {
    return {
        style: __assign(__assign({ a: tokens.a, b: tokens.b, c: tokens.c }, theme.vals), { instance: lastInstance++ }),
    };
};
var extraCache = getMemoCache();
var slotFn2 = function (tokens) {
    return extraCache(function () { return ({
        style: {
            a: tokens.a,
            b: tokens.b,
            instance: lastInstance++,
        },
    }); }, [tokens.a, tokens.b])[0];
};
var baseOptions = {
    tokens: [
        baseTokens,
        'uno',
        function (theme) { return ({
            b: theme.vals.foo,
        }); },
    ],
    states: ['hover', 'press'],
    slotProps: {
        slot1: {
            style: {
                instance: lastInstance++,
            },
        },
        slot2: buildProps(slotFn1, ['a', 'b', 'c']),
        slot3: slotFn2,
    },
    tokensThatAreAlsoProps: ['b'],
};
describe('useStyling test suite', function () {
    test('basic built hook', function () {
        var useStyling = buildUseStyling(baseOptions, themeHelper);
        var slotProps = useStyling({});
        var slotProps2 = useStyling({ p1: 2, p2: 'bar' });
        Object.keys(slotProps).forEach(function (key) {
            expect(slotProps[key]).toBe(slotProps2[key]);
        });
    });
});
//# sourceMappingURL=buildUseStyling.test.js.map