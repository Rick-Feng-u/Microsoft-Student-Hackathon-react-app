import { GetMemoValue } from '@fluentui-react-native/memo-cache';
/** A function to generate tokens based on a theme */
export declare type TokensFromTheme<TTokens, TTheme> = (theme: TTheme) => TTokens;
/**
 * Types of tokens, can be:
 * - string - will lookup the name in the theme
 * - Tokens - will merge the tokens in directly
 * - Function - will run against the theme once for each unique theme encountered
 */
export declare type TokenSettings<TTokens, TTheme> = string | TTokens | TokensFromTheme<TTokens, TTheme>;
/**
 * The main signature of a useTokens hook is to take the theme and produce a set of resolved tokens,
 * as well as a sub-cache, specific to this particular theme, that can be used for caching various styles
 * or values that are theme specific
 */
export declare type UseTokensCore<TTokens, TTheme> = (theme: TTheme) => [TTokens, GetMemoValue<TTokens>];
/**
 * The full signature also includes a customize function that returns an updated version of useTokens
 * that captures both the previous values, and layers in the new values specified
 */
export declare type UseTokens<TTokens, TTheme> = UseTokensCore<TTokens, TTheme> & {
    customize: (...tokens: TokenSettings<TTokens, TTheme>[]) => UseTokens<TTokens, TTheme>;
};
/**
 * Helper function that knows how to try to look up token information from the theme
 */
export declare type GetComponentInfo<TTokens, TTheme> = (theme: TTheme, name: string) => TTokens | TokensFromTheme<TTokens, TTheme>;
/**
 * Construct a useStyling hook which returns styled slot props based on props and tokens defined in options and in the theme
 *
 * @param options - options which drive behavior for the generated styling hook
 * @param themeHelper - injected theme functionality
 */
export declare function buildUseTokens<TTokens, TTheme>(getComponentInfo: GetComponentInfo<TTokens, TTheme> | undefined, ...tokens: TokenSettings<TTokens, TTheme>[]): UseTokens<TTokens, TTheme>;
//# sourceMappingURL=buildUseTokens.d.ts.map