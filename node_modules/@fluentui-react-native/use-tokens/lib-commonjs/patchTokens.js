"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Take a set of tokens (and a memo-cache) and apply changes to those tokens from an additional set of tokens. Only keys which are
 * not undefined will be applied and if no changes are detected the token object will be unchanged.
 *
 * @param tokens - base set of tokens to apply changes to, this will not be modified
 * @param cache - cache corresponding to this set of tokens
 * @param patchValues - new values to apply, values will be obtained via keys in the object
 * @returns - a tuple consisting of a new tokens object and a new memo-cache
 */
function patchTokens(tokens, cache, patchValues) {
    // reduce the patch values to the set of keys that are defined, and sort them to ensure consistent ordering
    var keys = Object.keys(patchValues)
        .filter(function (v) { return patchValues[v] !== undefined; })
        .sort();
    var _loop_1 = function (key) {
        var _a;
        _a = cache(function () {
            var _a;
            return (__assign(__assign({}, tokens), (_a = {}, _a[key] = patchValues[key], _a)));
        }, [key, patchValues[key]]), tokens = _a[0], cache = _a[1];
    };
    // for each key get an updated tokens collection based on key + value. Value alone isn't sufficient as the values
    // are not necessarily unique. i.e. { a: 'blue' } and { b: 'blue' } would cache to the same without the key
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        _loop_1(key);
    }
    // return the updated tokens and cache (if there were any keys applied)
    return [tokens, cache];
}
exports.patchTokens = patchTokens;
//# sourceMappingURL=patchTokens.js.map