"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var patchTokens_1 = require("./patchTokens");
var memo_cache_1 = require("@fluentui-react-native/memo-cache");
var themeTokens = {
    uno: 'uno',
    dos: 'dos',
    tres: 3,
    quatro: 4,
    cinco: true,
};
describe('patchTokens tests', function () {
    test('props get copied', function () {
        var cache = memo_cache_1.getMemoCache();
        var patchValues = { uno: 'one', quatro: 'quatro' };
        var tokens = patchTokens_1.patchTokens(themeTokens, cache, patchValues)[0];
        expect(tokens).not.toBe(themeTokens);
        for (var key in patchValues) {
            expect(tokens[key]).toEqual(patchValues[key]);
        }
    });
    test('no copied props does not change tokens', function () {
        var cache = memo_cache_1.getMemoCache();
        var patchValues1 = {};
        var tokens = patchTokens_1.patchTokens(themeTokens, cache, patchValues1)[0];
        expect(tokens).toBe(themeTokens);
        var patchValues2 = { tres: undefined };
        var tokens2 = patchTokens_1.patchTokens(themeTokens, cache, patchValues2)[0];
        expect(tokens2).toBe(themeTokens);
    });
    test('patching tokens cache independent of order', function () {
        var cache = memo_cache_1.getMemoCache();
        var patch1 = { uno: 'one', cinco: false };
        var patch2 = { cinco: false, uno: 'one' };
        var tokens1 = patchTokens_1.patchTokens(themeTokens, cache, patch1)[0];
        var tokens2 = patchTokens_1.patchTokens(themeTokens, cache, patch2)[0];
        expect(tokens1).toBe(tokens2);
    });
});
//# sourceMappingURL=patchTokens.test.js.map