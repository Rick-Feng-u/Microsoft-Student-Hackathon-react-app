var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { applyTokenLayers } from './applyTokenLayers';
import { getMemoCache } from '@fluentui-react-native/memo-cache';
var stateOrder = ['hover', 'press', 'disabled'];
var tokens1 = {
    a: 'a',
    b: 'b',
    c: 'c',
    hover: {
        a: 'a-hover',
        b: 'b-hover',
        press: {
            a: 'a-hover-press',
        },
    },
    press: {
        a: 'a-press',
        b: 'b-press',
    },
    disabled: {
        a: 'disabled',
        b: 'disabled',
        c: 'disabled',
    },
};
function stripLayers(tokens) {
    var t = __assign({}, tokens);
    delete t.hover;
    delete t.press;
    delete t.disabled;
    return t;
}
describe('applyLayers tests', function () {
    test('no layers returns tokens', function () {
        var cache = getMemoCache();
        var tokens = applyTokenLayers(tokens1, stateOrder, cache, function () { return false; })[0];
        expect(tokens).toBe(tokens1);
    });
    test('apply hover works', function () {
        var cache = getMemoCache();
        var lookup = function (layer) { return layer === 'hover'; };
        var result1 = applyTokenLayers(tokens1, stateOrder, cache, lookup)[0];
        expect(applyTokenLayers(tokens1, stateOrder, cache, lookup)[0]).toBe(result1);
        expect(stripLayers(result1)).toEqual({ a: 'a-hover', b: 'b-hover', c: 'c' });
    });
    test('apply hover and press layer correctly', function () {
        var cache = getMemoCache();
        var lookup = function (layer) { return layer === 'hover' || layer === 'press'; };
        var result1 = applyTokenLayers(tokens1, stateOrder, cache, lookup)[0];
        expect(applyTokenLayers(tokens1, stateOrder, cache, lookup)[0]).toBe(result1);
        expect(stripLayers(result1)).toEqual({ a: 'a-hover-press', b: 'b-press', c: 'c' });
    });
});
//# sourceMappingURL=applyTokenLayers.test.js.map