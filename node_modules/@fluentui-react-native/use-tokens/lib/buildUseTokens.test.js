var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { buildUseTokens } from './buildUseTokens';
var baseTokens = {
    a: 'a-base',
    b: 'b-base',
    c: 'c-base',
    hover: {
        c: 'c-base-hover',
    },
    press: {
        c: 'c-base-press',
    },
};
var defaultTheme = {
    vals: {
        foo: 'foo',
        bar: 'bar',
    },
    components: {
        uno: {
            a: 'uno-a',
            c: 'uno-c',
        },
        dos: {
            b: 'dos-b',
            c: 'dos-c',
        },
    },
};
var variantTheme = {
    vals: {
        foo: 'variant',
    },
    components: {},
};
var getComponentInfo = function (theme, name) { return theme.components[name]; };
var componentTokens = [baseTokens, 'uno', function (theme) { return ({ b: theme.vals.foo }); }];
var resolvedTokens = {
    a: 'uno-a',
    b: 'foo',
    c: 'uno-c',
    hover: {
        c: 'c-base-hover',
    },
    press: {
        c: 'c-base-press',
    },
};
var variantTokens = {
    a: 'a-base',
    b: 'variant',
    c: 'c-base',
    hover: {
        c: 'c-base-hover',
    },
    press: {
        c: 'c-base-press',
    },
};
describe('buildUseTokens test suite', function () {
    test('basic built hook', function () {
        var useTokens = buildUseTokens.apply(void 0, __spreadArrays([getComponentInfo], componentTokens));
        var tokens = useTokens(defaultTheme)[0];
        expect(tokens).toEqual(resolvedTokens);
    });
    test('multiple calls return same object', function () {
        var useTokens = buildUseTokens.apply(void 0, __spreadArrays([getComponentInfo], componentTokens));
        var tokens1 = useTokens(defaultTheme)[0];
        var tokens2 = useTokens(defaultTheme)[0];
        expect(tokens1).toBe(tokens2);
    });
    test('variant theme is separate', function () {
        var useTokens = buildUseTokens.apply(void 0, __spreadArrays([getComponentInfo], componentTokens));
        var tokensDefault = useTokens(defaultTheme)[0];
        var tokensVariant = useTokens(variantTheme)[0];
        expect(tokensVariant).not.toBe(tokensDefault);
        expect(tokensVariant).toEqual(variantTokens);
    });
    test('simple customization layers on top', function () {
        var useTokens = buildUseTokens.apply(void 0, __spreadArrays([getComponentInfo], componentTokens));
        var useTokensCustom = useTokens.customize({ a: 'custom' });
        var tokens = useTokensCustom(defaultTheme)[0];
        expect(tokens).toEqual(__assign(__assign({}, resolvedTokens), { a: 'custom' }));
    });
});
//# sourceMappingURL=buildUseTokens.test.js.map