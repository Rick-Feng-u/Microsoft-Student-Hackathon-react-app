import * as React from 'react';
import { IComposable, IPropFilter, INativeSlotType, IWithComposable, IRenderData, ISlots, IComposableDefinition, IExtractProps, IExtractSlotProps, IExtractState, IDefineUseStyling } from './Composable.types';
import { ISlotProps } from '@uifabricshared/foundation-settings';
export declare function atomicRender<TProps extends object, TState = object>(Slots: ISlots<ISlotProps<TProps>>, _renderData: IRenderData<ISlotProps<TProps>, TState>, ...children: React.ReactNode[]): JSX.Element | null;
export declare function atomicUsePrepareProps<TProps extends object, TSlotProps extends ISlotProps = ISlotProps<TProps>, TState = object>(props: TProps, useStyling: IDefineUseStyling<TProps, TSlotProps>): IRenderData<TSlotProps, TState>;
/**
 * Create a component that can be composed into other objects to remove extra levels from the tree
 *
 * @param options - composable options which define the behavior of the component
 */
export declare function composable<TType>(definition: IComposableDefinition<IExtractProps<TType>, IExtractSlotProps<TType>, IExtractState<TType>>): IWithComposable<React.FunctionComponent<IExtractProps<TType>>, IComposable<IExtractProps<TType>, IExtractSlotProps<TType>, IExtractState<TType>>>;
/**
 * Helper to create a composable implementation of a simple atomic component
 *
 * @param target - slot type to create an atomic component from
 * @param usePrepareProps - prop processing implementation.
 * @param filter - optional filter.  If set it allows stripping properties before they are passed to target
 */
export declare function atomic<TProps extends object, TState extends object = object>(target: INativeSlotType, usePrepareProps: IComposable<TProps, ISlotProps<TProps>, TState>['usePrepareProps'], filter?: IPropFilter): React.FunctionComponent<TProps>;
//# sourceMappingURL=Composable.d.ts.map