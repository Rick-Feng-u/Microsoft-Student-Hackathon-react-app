/* eslint-disable */
import { composable, } from '@uifabricshared/foundation-composable';
import { initializeStyling, getOptionsFromObj } from './useStyling';
import { immutableMerge } from '@fluentui-react-native/immutable-merge';
/**
 * Merge current and base options together to form the new object definition.  These objects will merge with the
 * exception of settings which will be appended
 *
 * @param inputComponent - input component
 * @param base - component to use as a baseline (if it exists)
 */
function _getComponentOptions(inputComponent, base) {
    if (base) {
        var mergedSettings = { settings: [].concat(base.settings || [], inputComponent.settings || []).filter(function (v) { return v; }) };
        return immutableMerge(base, inputComponent, mergedSettings);
    }
    return inputComponent;
}
/**
 * Assembles a higher order component, optionally composing a base HOC or base primitive control.  The compose pattern
 * allows a greater degree of customization than is available via props and allows for customization without adding
 * additional layers to the react hierarchy.
 *
 * @param inputComponent - component definition for the component to be created.  See IComposeOptions for more details.
 * @param base - optional base component to compose, this can be an intrinsic, a stock element, or another composable
 */
export function compose(inputComponent, base) {
    // get merged options for the component
    var options = _getComponentOptions(inputComponent, base && getOptionsFromObj(base));
    // set up the styling injection function
    options.useStyling = initializeStyling(options);
    // use composable to create the function implementation
    var Component = composable(options);
    // attach extra information to the returned function component
    Component.displayName = options.displayName;
    Object.assign(Component, options.statics);
    // set up the customize handler
    Component.customize = function () {
        var settings = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            settings[_i] = arguments[_i];
        }
        return compose({ settings: settings }, Component);
    };
    // set up the compose handler
    Component.compose = function (newOptions) {
        return compose(newOptions, Component);
    };
    // now return the newly created component
    return Component;
}
//# sourceMappingURL=compose.js.map