import { IComponentSettingsCollection, IComponentSettings, ISlotProps, IOverrideLookup } from './Settings.types';
/**
 * Merge settings together.  This routine should work for IComponentSettings types or ISlotProps
 * @param settings - settings to merge together
 */
export declare function mergeSettings<TSettings extends IComponentSettings = IComponentSettings>(...settings: (object | undefined)[]): TSettings;
/**
 * Merge collections of settings together.  This can handle theme resolution or merging sets of overrides
 * @param collections - the settings collections to merge
 */
export declare function mergeSettingsCollection<TCollection extends IComponentSettingsCollection = IComponentSettingsCollection>(...collections: object[]): TCollection;
export declare function getActiveOverrides(target: IComponentSettings, lookup?: IOverrideLookup): string[];
/**
 * Apply overrides to `target`, producing a new settings object if any need to be applied.
 *
 * `overrideLookup` is an object where keys will be looked up in the order specified by the precedence array.
 * The values inside this structure can be any type but will cause the override to apply if they are truthy
 */
export declare function resolveSettingsOverrides(target: IComponentSettings, overrideLookup?: IOverrideLookup): IComponentSettings;
/**
 * Turn a settings object into a slot props object.
 * @param target - settings block to strip the settings specific information from
 */
export declare function slotPropsFromSettings(target: IComponentSettings): ISlotProps;
//# sourceMappingURL=Settings.d.ts.map