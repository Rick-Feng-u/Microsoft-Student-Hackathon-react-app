import { IMockTheme } from './MockTheme';
import { IComponentTokens, IStyleFactories } from './Token.types';
import { ISlotProps, IComponentSettings } from '@uifabricshared/foundation-settings';
import { StyleProp } from '@fluentui-react-native/merge-props';
import { GetMemoValue } from '@fluentui-react-native/memo-cache';
export declare type ICSSStyle = React.CSSProperties;
export interface IMockBaseProps {
    style?: StyleProp<ICSSStyle>;
}
export declare type IMockComponentFn<TProps, TSlotProps extends ISlotProps, TTokens> = (props: TProps, settings: IComponentSettings<TSlotProps> & {
    tokens?: TTokens;
}, theme: IMockTheme, cache: GetMemoValue<any>, recurse?: boolean) => TSlotProps | TProps;
export declare type IMockComponent<TProps, TSlotProps extends ISlotProps, TTokens> = IMockComponentFn<TProps, TSlotProps, TTokens> & {
    __options?: IComponentTokens<TSlotProps, TTokens, IMockTheme>;
};
export declare type IMockSlots<TSlotProps extends ISlotProps> = {
    [K in keyof TSlotProps]: any;
};
export interface IMockComponentOptions<TSlotProps extends ISlotProps, TTokens> {
    slots?: IMockSlots<TSlotProps>;
    styles?: IStyleFactories<TSlotProps, TTokens, IMockTheme>;
}
export declare function stockFakeComponent(props: IMockBaseProps, _settings: ISlotProps, _theme: IMockTheme, _cache: GetMemoValue<any>, _recurse: boolean): IMockBaseProps;
export declare function mockCreate<TProps extends object, TSlotProps extends ISlotProps, TTokens extends object>(options: IMockComponentOptions<TSlotProps, TTokens>): IMockComponent<TProps, TSlotProps, TTokens>;
//# sourceMappingURL=MockComponent.d.ts.map