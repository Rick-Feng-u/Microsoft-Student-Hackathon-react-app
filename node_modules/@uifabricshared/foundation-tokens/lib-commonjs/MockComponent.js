"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
var Token_1 = require("./Token");
var Token_function_1 = require("./Token.function");
function stockFakeComponent(props, _settings, _theme, _cache, _recurse) {
    return props;
}
exports.stockFakeComponent = stockFakeComponent;
function mockCreate(options) {
    var slots = options.slots;
    var hasTokens = slots
        ? function (target, key) {
            var targetOptions = slots[target] && slots[target].__options;
            return targetOptions && targetOptions.tokenKeys.hasOwnProperty(key);
        }
        : undefined;
    var resolvedTokens = Token_function_1.buildComponentTokens(options.styles, hasTokens);
    var fn = function (props, settings, theme, cache, recurse) {
        var newSettings = Token_1.processTokens(props, theme, settings, resolvedTokens, cache);
        if (recurse) {
            Object.keys(slots).forEach(function (slotName) {
                var _a;
                var slot = slots[slotName];
                if (slot.__options && newSettings[slotName]) {
                    var _b = cache(null, [slotName]), slotCache = _b[1];
                    var slotSettings = slot(newSettings[slotName] || {}, {}, theme, slotCache, false);
                    var rootKey = 'root';
                    if (slotSettings[rootKey]) {
                        newSettings = foundation_settings_1.mergeSettings(newSettings, (_a = {}, _a[slotName] = slotSettings[rootKey], _a));
                    }
                }
            });
        }
        var _a = newSettings, tokens = _a.tokens, nonTokenSettings = __rest(_a, ["tokens"]);
        return nonTokenSettings;
    };
    fn.__options = resolvedTokens;
    return fn;
}
exports.mockCreate = mockCreate;
//# sourceMappingURL=MockComponent.js.map