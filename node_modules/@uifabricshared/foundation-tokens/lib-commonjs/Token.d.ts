import { IComponentTokens } from './Token.types';
import { ISlotProps, IComponentSettings } from '@uifabricshared/foundation-settings';
import { GetMemoValue } from '@fluentui-react-native/memo-cache';
/**
 * Run through the end to end token workflow for render.  This will resolve the tokens and attempt to preempt style creation
 * by referencing values in the cache
 *
 * @param props - user props passed in and copied into a mutable object, these have precedence
 * @param theme - theme to get styling info from
 * @param slotProps - starting slotProps, the root entry may have token defaults filled in
 * @param tokenInfo - the set of token props as well as the shortened set that have been overridden
 * @param prefix - cache key to append token info to, this generally refers to the settings
 * @param cache - cache which holds the slotProps if they have been built before
 * @param displayName - optional component display name, used for class building
 * @param finalizer - optional function to process styles before caching happens
 */
export declare function processTokens<TSlotProps extends ISlotProps, TTokens extends object, TTheme>(props: TTokens, theme: TTheme, slotProps: IComponentSettings<TSlotProps & {
    tokens?: TTokens;
}>, tokenInfo: IComponentTokens<TSlotProps, TTokens, TTheme>, cache: GetMemoValue<TSlotProps>): ISlotProps;
//# sourceMappingURL=Token.d.ts.map