"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Take the input props and props from settings and return a merged set of token props (a single source
 * of truth) as well as an abbreviated collection with tokens that have been overridden from the user
 * props
 *
 * @param props - user props passed in to render
 * @param rootSlotProps - props for the root slot, this will have any tokens loaded from settings
 * @param tokenKeys - an object that contains the set of keys we care about for tokens on this component
 */
function _getTokenPropInfo(props, tokensSlot, tokenKeys) {
    var tokens = __assign({}, tokensSlot);
    var deltas = {};
    for (var key in tokenKeys) {
        if (props[key] !== undefined && props[key] !== tokens[key]) {
            deltas[key] = tokens[key] = props[key];
        }
    }
    return { tokens: tokens, deltas: deltas, tokenKeys: tokenKeys };
}
/**
 * Run through the end to end token workflow for render.  This will resolve the tokens and attempt to preempt style creation
 * by referencing values in the cache
 *
 * @param props - user props passed in and copied into a mutable object, these have precedence
 * @param theme - theme to get styling info from
 * @param slotProps - starting slotProps, the root entry may have token defaults filled in
 * @param tokenInfo - the set of token props as well as the shortened set that have been overridden
 * @param prefix - cache key to append token info to, this generally refers to the settings
 * @param cache - cache which holds the slotProps if they have been built before
 * @param displayName - optional component display name, used for class building
 * @param finalizer - optional function to process styles before caching happens
 */
function processTokens(props, theme, slotProps, tokenInfo, cache) {
    // merge in tokens and build up the cache key which are the tokens overridden by the user
    slotProps = slotProps || {};
    var rootSlotProps = slotProps.tokens || {};
    var handlers = tokenInfo.handlers, tokenKeys = tokenInfo.tokenKeys;
    var tokenPropInfo = _getTokenPropInfo(props, rootSlotProps, tokenKeys);
    var resolvedSlotProps = { tokens: tokenPropInfo.tokens || {} };
    Object.getOwnPropertyNames(handlers).forEach(function (slotName) {
        var handler = handlers[slotName];
        resolvedSlotProps[slotName] = handler(slotProps[slotName] || {}, tokenPropInfo, theme, slotName, cache);
    });
    // return the cache entry
    return resolvedSlotProps;
}
exports.processTokens = processTokens;
//# sourceMappingURL=Token.js.map