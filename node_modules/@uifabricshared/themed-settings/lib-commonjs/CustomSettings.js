"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var foundation_settings_1 = require("@uifabricshared/foundation-settings");
/**
 * Merges the various settings for a component together
 * @param customSettings - the array of settings to apply for this object
 * @param theme - the theme to use for value lookups and component definitions
 * @param getFromTheme - helper function to retrieve settings from a theme
 */
function mergeBaseSettings(customSettings, theme, getFromTheme) {
    return customSettings
        ? foundation_settings_1.mergeSettings.apply(void 0, customSettings.map(function (entry) {
            if (typeof entry === 'string') {
                return (getFromTheme && getFromTheme(theme, entry)) || undefined;
            }
            else if (typeof entry === 'function') {
                return entry(theme);
            }
            return entry;
        })) : undefined;
}
exports.mergeBaseSettings = mergeBaseSettings;
/**
 * Resolve the stack of settings, applying any applicable overrides, while caching the results.  Also returns the cache key
 * so it can be used as a prefix for additional caching layers
 *
 * @param customSettings - array of settings entries to merge
 * @param theme - theme used to look up named settings
 * @param memoValue - a GetMemoValue function to use as the root of caching
 * @param hasOverride - override lookup type for looking up whether an override should be applied to the settings
 * @param getFromTheme - routine to look up the named entries in the theme.  They will be skipped if not specified.
 */
function getThemedSettings(customSettings, theme, memoValue, hasOverride, getFromTheme) {
    var _a;
    // resolve the settings for this component, keyed on the theme
    var _b = memoValue(function () { return mergeBaseSettings(customSettings, theme, getFromTheme); }, [theme]), settings = _b[0], getMemoValue = _b[1];
    // if overrides are set, resolve the override settings, keyed on the applied overrides
    var overrides = foundation_settings_1.getActiveOverrides(settings, hasOverride);
    if (overrides.length > 0) {
        _a = getMemoValue(function () { return foundation_settings_1.resolveSettingsOverrides(settings, hasOverride); }, overrides), settings = _a[0], getMemoValue = _a[1];
    }
    // return the merged settings and a query routine to go deeper in the cache
    return { settings: settings, getMemoValue: getMemoValue };
}
exports.getThemedSettings = getThemedSettings;
//# sourceMappingURL=CustomSettings.js.map