import { IComponentSettings, IOverrideLookup } from '@uifabricshared/foundation-settings';
import { IGetSettingsFromTheme, ISettingsEntry } from './CustomSettings.types';
import { GetMemoValue } from '@fluentui-react-native/memo-cache';
/**
 * Merges the various settings for a component together
 * @param customSettings - the array of settings to apply for this object
 * @param theme - the theme to use for value lookups and component definitions
 * @param getFromTheme - helper function to retrieve settings from a theme
 */
export declare function mergeBaseSettings<TSettings extends IComponentSettings, TTheme>(customSettings: ISettingsEntry<TSettings, TTheme>[], theme: TTheme, getFromTheme?: IGetSettingsFromTheme<TSettings, TTheme>): TSettings;
/**
 * Resolve the stack of settings, applying any applicable overrides, while caching the results.  Also returns the cache key
 * so it can be used as a prefix for additional caching layers
 *
 * @param customSettings - array of settings entries to merge
 * @param theme - theme used to look up named settings
 * @param memoValue - a GetMemoValue function to use as the root of caching
 * @param hasOverride - override lookup type for looking up whether an override should be applied to the settings
 * @param getFromTheme - routine to look up the named entries in the theme.  They will be skipped if not specified.
 */
export declare function getThemedSettings<TSettings extends IComponentSettings, TTheme>(customSettings: ISettingsEntry<TSettings, TTheme>[], theme: TTheme, memoValue: GetMemoValue<TSettings, TSettings>, hasOverride?: IOverrideLookup, getFromTheme?: IGetSettingsFromTheme<TSettings, TTheme>): {
    settings: TSettings | undefined;
    getMemoValue: GetMemoValue<TSettings, TSettings>;
};
//# sourceMappingURL=CustomSettings.d.ts.map