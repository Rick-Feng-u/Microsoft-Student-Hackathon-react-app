import { mergeSettings } from '@uifabricshared/foundation-settings';
import { mergeBaseSettings, getThemedSettings } from './CustomSettings';
import { getMemoCache } from '@fluentui-react-native/memo-cache';
var _theme = {
    palette: {
        buttonTextHovered: 'bth',
        buttonBackground: 'bb',
        buttonBackgroundHovered: 'bbh',
        buttonBorder: 'bb',
        buttonText: 'bt',
        windowBackground: 'wb',
        windowText: 'wt',
    },
    typography: {
        fontSizes: {
            large: 14,
            medium: 12,
            small: 10,
        },
    },
};
var _lookup = {
    val1: {
        root: {
            value: 'foo',
            backgroundColor: 'red',
            color: 'val1',
            borderWidth: 2,
        },
        content: {
            color: 'green',
            value: 'val1',
            fontSize: 10,
        },
        icon: {
            color: 'black',
        },
        _precedence: ['primary', 'hovered', 'pressed'],
        _overrides: {
            primary: {
                root: {
                    backgroundColor: 'purple',
                },
                _overrides: {
                    hovered: {
                        root: {
                            backgroundColor: 'pink',
                        },
                    },
                    pressed: {
                        root: {
                            backgroundColor: 'orange',
                        },
                    },
                },
            },
            hovered: {
                root: {
                    backgroundColor: 'gray',
                },
            },
            pressed: {
                root: {
                    backgroundColor: 'white',
                },
            },
        },
    },
    val2: {
        root: {
            color: '#1c1c1c',
            value: 'val2',
        },
    },
};
var val1rootHovered = {
    value: 'foo',
    backgroundColor: 'gray',
    color: 'val1',
    borderWidth: 2,
};
var val1primaryHovered = {
    value: 'foo',
    backgroundColor: 'pink',
    color: 'val1',
    borderWidth: 2,
};
function getSettings(_t, name) {
    return _lookup[name];
}
var customSettings1 = ['val1'];
var result1 = _lookup.val1;
var fragment2 = {
    root: { borderWidth: 3, backgroundColor: 'yellow' },
    content: { value: 'cs1' },
    _precedence: ['hovered', 'pressed'],
};
var themeFn2 = function (t) { return ({
    root: {
        color: t.palette.buttonText,
        borderColor: t.palette.buttonBackground,
    },
    content: {
        color: t.palette.buttonText,
    },
    _overrides: {
        hovered: {
            root: {
                color: t.palette.buttonTextHovered,
                backgroundColor: t.palette.buttonBackgroundHovered,
            },
        },
    },
}); };
var customSettings2 = [fragment2, 'val2', themeFn2];
var result2 = mergeSettings(fragment2, _lookup.val2, themeFn2(_theme));
describe('Custom settings tests', function () {
    test('mergeBaseSettings handles empty values', function () {
        var sNull = mergeBaseSettings(undefined, _theme, getSettings);
        expect(sNull).toEqual(undefined);
        var sEmpty = mergeBaseSettings([], _theme, getSettings);
        expect(sEmpty).toEqual(undefined);
    });
    test('mergeBaseSettings looks up in theme correctly', function () {
        var s1 = mergeBaseSettings(customSettings1, _theme, getSettings);
        expect(s1).toEqual(result1);
    });
    test('mergeBaseSettings merges correctly', function () {
        var s2 = mergeBaseSettings(customSettings2, _theme, getSettings);
        expect(s2).toEqual(result2);
    });
    test('getThemedSettings caches merge result', function () {
        var newCache = getMemoCache();
        var settings = getThemedSettings(customSettings2, _theme, newCache, {}, getSettings).settings;
        expect(getThemedSettings(customSettings2, _theme, newCache, {}, getSettings).settings).toBe(settings);
    });
    test('getThemedSettings resolves overrides', function () {
        var newCache = getMemoCache();
        var settings = getThemedSettings(customSettings1, _theme, newCache, { hovered: true }, getSettings).settings;
        expect(settings.root).toEqual(val1rootHovered);
    });
    test('getThemedSettings resolves multiple overrides', function () {
        var newCache = getMemoCache();
        var settings = getThemedSettings(customSettings1, _theme, newCache, { hovered: true, primary: true }, getSettings).settings;
        expect(settings.root).toEqual(val1primaryHovered);
    });
});
//# sourceMappingURL=CustomSettings.test.js.map