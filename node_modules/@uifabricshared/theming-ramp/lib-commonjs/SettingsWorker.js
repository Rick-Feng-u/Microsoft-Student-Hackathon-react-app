"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** helper to strip out the component settings specific bits from the returned structure */
function returnAsSlotProps(target) {
    if (target) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var _overrides = target._overrides, _precedence = target._precedence, settings = __rest(target, ["_overrides", "_precedence"]);
        return settings;
    }
    return target;
}
exports.returnAsSlotProps = returnAsSlotProps;
/**
 *
 * @param theme - theme used to retrieve settings
 * @param name - name of the settings entry to retrieve
 * @param overrides - optional override lookup object to conditionally apply overrides
 */
function getSettings(theme, name) {
    return (theme.components && theme.components[name]) || undefined;
}
exports.getSettings = getSettings;
//# sourceMappingURL=SettingsWorker.js.map