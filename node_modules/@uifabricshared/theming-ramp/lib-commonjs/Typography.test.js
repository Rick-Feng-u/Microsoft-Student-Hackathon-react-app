"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Typography_1 = require("./Typography");
var families = {
    primary: 'Verdana',
    monospace: 'Courier New',
};
var sizes = {
    caption: 8,
    subheader: 16,
};
var weights = {
    regular: '500',
    semiBold: '700',
};
var variants = {
    captionStandard: {
        face: 'Verdana',
        size: 8,
        weight: '500',
    },
    subheaderStandard: {
        face: 'Verdana',
        size: 16,
        weight: '500',
    },
    subheaderSemibold: {
        face: 'Verdana',
        size: 16,
        weight: '700',
    },
};
var typography = {
    families: families,
    sizes: sizes,
    weights: weights,
    variants: variants,
};
describe('Typography tests', function () {
    test('resolveFontFamily "monospace" returns "Courier New"', function () {
        expect(Typography_1.resolveFontFamily(typography, 'monospace')).toBe('Courier New');
    });
    test('resolveFontFamily "Arial" returns "Arial"', function () {
        expect(Typography_1.resolveFontFamily(typography, 'Arial')).toBe('Arial');
    });
    test('resolveFontSize "caption" returns 8', function () {
        expect(Typography_1.resolveFontSize(typography, 'caption')).toBe(8);
    });
    test('resolveFontSize 15 returns 15', function () {
        expect(Typography_1.resolveFontSize(typography, 15)).toBe(15);
    });
    test('resolveFontSize "semiBold" returns 700', function () {
        expect(Typography_1.resolveFontWeight(typography, 'semiBold')).toBe('700');
    });
    test('resolveFontSize 200 returns 200', function () {
        expect(Typography_1.resolveFontWeight(typography, '200')).toBe('200');
    });
});
//# sourceMappingURL=Typography.test.js.map