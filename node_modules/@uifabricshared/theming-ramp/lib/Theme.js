/* eslint-disable */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { mergeSettingsCollection } from '@uifabricshared/foundation-settings';
import { immutableMergeCore } from '@fluentui-react-native/immutable-merge';
function _settingsHandler() {
    var objs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objs[_i] = arguments[_i];
    }
    return mergeSettingsCollection.apply(void 0, objs);
}
var _themeMergeOptions = {
    object: true,
    settings: _settingsHandler,
};
/**
 * Resolve `partialTheme` into a fully specified theme, using `theme` to fill
 * in any missing values.
 */
export function resolvePartialTheme(theme, partialTheme) {
    var newTheme = immutableMergeCore(_themeMergeOptions, theme, partialTheme);
    if (newTheme === theme) {
        newTheme = __assign({}, newTheme);
    }
    return newTheme;
}
//# sourceMappingURL=Theme.js.map