var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { resolvePartialTheme } from './Theme';
import { mockTheme } from '@fluentui-react-native/test-tools';
var theme = __assign(__assign({}, mockTheme), { components: {
        View: {
            tokens: {
                backgroundColor: 'bodyBackground',
                fontFamily: 'primary',
            },
        },
    } });
var partialTheme = {
    colors: {
        bodySubtext: 'rgb(100,100,100)',
    },
    components: {
        Text: {
            tokens: {
                backgroundColor: 'cyan',
            },
        },
    },
};
describe('Theme tests', function () {
    test("resolvePartialTheme reuses the theme's colors object when the partial theme is empty", function () {
        var resolved = resolvePartialTheme(theme, {});
        expect(resolved.colors).toBe(theme.colors);
    });
    test("resolvePartialTheme reuses the theme's typography object when the partial theme is empty", function () {
        var resolved = resolvePartialTheme(theme, {});
        expect(resolved.typography).toBe(theme.typography);
    });
    test("resolvePartialTheme reuses the theme's layer collection object when the partial theme is empty", function () {
        var resolved = resolvePartialTheme(theme, {});
        expect(resolved.components).toBe(theme.components);
    });
    test('resolvePartialTheme returns a blend of the partial theme and the full theme', function () {
        var resolved = resolvePartialTheme(theme, partialTheme);
        expect(resolved.colors.bodySubtext).toEqual(partialTheme.colors.bodySubtext);
        expect(resolved.components).toEqual({
            View: {
                tokens: {
                    backgroundColor: 'bodyBackground',
                    fontFamily: 'primary',
                },
            },
            Text: {
                tokens: {
                    backgroundColor: 'cyan',
                },
            },
        });
    });
});
//# sourceMappingURL=Theme.test.js.map